{"version":3,"file":"bundle.min.worker.js","mappings":"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","sources":["webpack://eomap-js/./src/core/gfx/load/load-type.js","webpack://eomap-js/./src/core/util/math-utils.js","webpack://eomap-js/./src/core/gfx/load/fax-code.js","webpack://eomap-js/./src/core/gfx/load/dib-reader.js","webpack://eomap-js/./src/core/gfx/load/pe-reader.js","webpack://eomap-js/./src/core/gfx/load/gfx-loader.worker.js"],"sourcesContent":["export const LoadType = {\n  EGF: 1,\n  DIB: 2,\n};\n","export function trailingZeros(n) {\n  n |= 0;\n  return n ? 31 - Math.clz32(n & -n) : 0;\n}\n\nexport function countOnes(n) {\n  n = n - ((n >> 1) & 0x55555555);\n  n = (n & 0x33333333) + ((n >> 2) & 0x33333333);\n  return (((n + (n >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;\n}\n","/*\n * WHITE_CODES and BLACK_CODES are tables of G31D fax codes.\n *\n * These were taken from LibTiff.\n * See:\n * https://github.com/BitMiracle/libtiff.net/blob/master/LibTiff/Internal/CCITTCodec_Data.cs\n */\n\n// prettier-ignore\nconst WHITE_CODES = [\n  8, 0x35, 0,     /* 0011 0101 */\n  6, 0x7, 1,      /* 0001 11 */\n  4, 0x7, 2,      /* 0111 */\n  4, 0x8, 3,      /* 1000 */\n  4, 0xB, 4,      /* 1011 */\n  4, 0xC, 5,      /* 1100 */\n  4, 0xE, 6,      /* 1110 */\n  4, 0xF, 7,      /* 1111 */\n  5, 0x13, 8,     /* 1001 1 */\n  5, 0x14, 9,     /* 1010 0 */\n  5, 0x7, 10,     /* 0011 1 */\n  5, 0x8, 11,     /* 0100 0 */\n  6, 0x8, 12,     /* 0010 00 */\n  6, 0x3, 13,     /* 0000 11 */\n  6, 0x34, 14,    /* 1101 00 */\n  6, 0x35, 15,    /* 1101 01 */\n  6, 0x2A, 16,    /* 1010 10 */\n  6, 0x2B, 17,    /* 1010 11 */\n  7, 0x27, 18,    /* 0100 111 */\n  7, 0xC, 19,     /* 0001 100 */\n  7, 0x8, 20,     /* 0001 000 */\n  7, 0x17, 21,    /* 0010 111 */\n  7, 0x3, 22,     /* 0000 011 */\n  7, 0x4, 23,     /* 0000 100 */\n  7, 0x28, 24,    /* 0101 000 */\n  7, 0x2B, 25,    /* 0101 011 */\n  7, 0x13, 26,    /* 0010 011 */\n  7, 0x24, 27,    /* 0100 100 */\n  7, 0x18, 28,    /* 0011 000 */\n  8, 0x2, 29,     /* 0000 0010 */\n  8, 0x3, 30,     /* 0000 0011 */\n  8, 0x1A, 31,    /* 0001 1010 */\n  8, 0x1B, 32,    /* 0001 1011 */\n  8, 0x12, 33,    /* 0001 0010 */\n  8, 0x13, 34,    /* 0001 0011 */\n  8, 0x14, 35,    /* 0001 0100 */\n  8, 0x15, 36,    /* 0001 0101 */\n  8, 0x16, 37,    /* 0001 0110 */\n  8, 0x17, 38,    /* 0001 0111 */\n  8, 0x28, 39,    /* 0010 1000 */\n  8, 0x29, 40,    /* 0010 1001 */\n  8, 0x2A, 41,    /* 0010 1010 */\n  8, 0x2B, 42,    /* 0010 1011 */\n  8, 0x2C, 43,    /* 0010 1100 */\n  8, 0x2D, 44,    /* 0010 1101 */\n  8, 0x4, 45,     /* 0000 0100 */\n  8, 0x5, 46,     /* 0000 0101 */\n  8, 0xA, 47,     /* 0000 1010 */\n  8, 0xB, 48,     /* 0000 1011 */\n  8, 0x52, 49,    /* 0101 0010 */\n  8, 0x53, 50,    /* 0101 0011 */\n  8, 0x54, 51,    /* 0101 0100 */\n  8, 0x55, 52,    /* 0101 0101 */\n  8, 0x24, 53,    /* 0010 0100 */\n  8, 0x25, 54,    /* 0010 0101 */\n  8, 0x58, 55,    /* 0101 1000 */\n  8, 0x59, 56,    /* 0101 1001 */\n  8, 0x5A, 57,    /* 0101 1010 */\n  8, 0x5B, 58,    /* 0101 1011 */\n  8, 0x4A, 59,    /* 0100 1010 */\n  8, 0x4B, 60,    /* 0100 1011 */\n  8, 0x32, 61,    /* 0011 0010 */\n  8, 0x33, 62,    /* 0011 0011 */\n  8, 0x34, 63,    /* 0011 0100 */\n  5, 0x1B, 64,    /* 1101 1 */\n  5, 0x12, 128,   /* 1001 0 */\n  6, 0x17, 192,   /* 0101 11 */\n  7, 0x37, 256,   /* 0110 111 */\n  8, 0x36, 320,   /* 0011 0110 */\n  8, 0x37, 384,   /* 0011 0111 */\n  8, 0x64, 448,   /* 0110 0100 */\n  8, 0x65, 512,   /* 0110 0101 */\n  8, 0x68, 576,   /* 0110 1000 */\n  8, 0x67, 640,   /* 0110 0111 */\n  9, 0xCC, 704,   /* 0110 0110 0 */\n  9, 0xCD, 768,   /* 0110 0110 1 */\n  9, 0xD2, 832,   /* 0110 1001 0 */\n  9, 0xD3, 896,   /* 0110 1001 1 */\n  9, 0xD4, 960,   /* 0110 1010 0 */\n  9, 0xD5, 1024,  /* 0110 1010 1 */\n  9, 0xD6, 1088,  /* 0110 1011 0 */\n  9, 0xD7, 1152,  /* 0110 1011 1 */\n  9, 0xD8, 1216,  /* 0110 1100 0 */\n  9, 0xD9, 1280,  /* 0110 1100 1 */\n  9, 0xDA, 1344,  /* 0110 1101 0 */\n  9, 0xDB, 1408,  /* 0110 1101 1 */\n  9, 0x98, 1472,  /* 0100 1100 0 */\n  9, 0x99, 1536,  /* 0100 1100 1 */\n  9, 0x9A, 1600,  /* 0100 1101 0 */\n  6, 0x18, 1664,  /* 0110 00 */\n  9, 0x9B, 1728,  /* 0100 1101 1 */\n  11, 0x8, 1792,  /* 0000 0001 000 */\n  11, 0xC, 1856,  /* 0000 0001 100 */\n  11, 0xD, 1920,  /* 0000 0001 101 */\n  12, 0x12, 1984, /* 0000 0001 0010 */\n  12, 0x13, 2048, /* 0000 0001 0011 */\n  12, 0x14, 2112, /* 0000 0001 0100 */\n  12, 0x15, 2176, /* 0000 0001 0101 */\n  12, 0x16, 2240, /* 0000 0001 0110 */\n  12, 0x17, 2304, /* 0000 0001 0111 */\n  12, 0x1C, 2368, /* 0000 0001 1100 */\n  12, 0x1D, 2432, /* 0000 0001 1101 */\n  12, 0x1E, 2496, /* 0000 0001 1110 */\n  12, 0x1F, 2560, /* 0000 0001 1111 */\n  12, 0x1, -1,    /* 0000 0000 0001 */\n];\n\n// prettier-ignore\nconst BLACK_CODES = [\n  10, 0x37, 0,    /* 0000 1101 11 */\n  3, 0x2, 1,      /* 010 */\n  2, 0x3, 2,      /* 11 */\n  2, 0x2, 3,      /* 10 */\n  3, 0x3, 4,      /* 011 */\n  4, 0x3, 5,      /* 0011 */\n  4, 0x2, 6,      /* 0010 */\n  5, 0x3, 7,      /* 0001 1 */\n  6, 0x5, 8,      /* 0001 01 */\n  6, 0x4, 9,      /* 0001 00 */\n  7, 0x4, 10,     /* 0000 100 */\n  7, 0x5, 11,     /* 0000 101 */\n  7, 0x7, 12,     /* 0000 111 */\n  8, 0x4, 13,     /* 0000 0100 */\n  8, 0x7, 14,     /* 0000 0111 */\n  9, 0x18, 15,    /* 0000 1100 0 */\n  10, 0x17, 16,   /* 0000 0101 11 */\n  10, 0x18, 17,   /* 0000 0110 00 */\n  10, 0x8, 18,    /* 0000 0010 00 */\n  11, 0x67, 19,   /* 0000 1100 111 */\n  11, 0x68, 20,   /* 0000 1101 000 */\n  11, 0x6C, 21,   /* 0000 1101 100 */\n  11, 0x37, 22,   /* 0000 0110 111 */\n  11, 0x28, 23,   /* 0000 0101 000 */\n  11, 0x17, 24,   /* 0000 0010 111 */\n  11, 0x18, 25,   /* 0000 0011 000 */\n  12, 0xCA, 26,   /* 0000 1100 1010 */\n  12, 0xCB, 27,   /* 0000 1100 1011 */\n  12, 0xCC, 28,   /* 0000 1100 1100 */\n  12, 0xCD, 29,   /* 0000 1100 1101 */\n  12, 0x68, 30,   /* 0000 0110 1000 */\n  12, 0x69, 31,   /* 0000 0110 1001 */\n  12, 0x6A, 32,   /* 0000 0110 1010 */\n  12, 0x6B, 33,   /* 0000 0110 1011 */\n  12, 0xD2, 34,   /* 0000 1101 0010 */\n  12, 0xD3, 35,   /* 0000 1101 0011 */\n  12, 0xD4, 36,   /* 0000 1101 0100 */\n  12, 0xD5, 37,   /* 0000 1101 0101 */\n  12, 0xD6, 38,   /* 0000 1101 0110 */\n  12, 0xD7, 39,   /* 0000 1101 0111 */\n  12, 0x6C, 40,   /* 0000 0110 1100 */\n  12, 0x6D, 41,   /* 0000 0110 1101 */\n  12, 0xDA, 42,   /* 0000 1101 1010 */\n  12, 0xDB, 43,   /* 0000 1101 1011 */\n  12, 0x54, 44,   /* 0000 0101 0100 */\n  12, 0x55, 45,   /* 0000 0101 0101 */\n  12, 0x56, 46,   /* 0000 0101 0110 */\n  12, 0x57, 47,   /* 0000 0101 0111 */\n  12, 0x64, 48,   /* 0000 0110 0100 */\n  12, 0x65, 49,   /* 0000 0110 0101 */\n  12, 0x52, 50,   /* 0000 0101 0010 */\n  12, 0x53, 51,   /* 0000 0101 0011 */\n  12, 0x24, 52,   /* 0000 0010 0100 */\n  12, 0x37, 53,   /* 0000 0011 0111 */\n  12, 0x38, 54,   /* 0000 0011 1000 */\n  12, 0x27, 55,   /* 0000 0010 0111 */\n  12, 0x28, 56,   /* 0000 0010 1000 */\n  12, 0x58, 57,   /* 0000 0101 1000 */\n  12, 0x59, 58,   /* 0000 0101 1001 */\n  12, 0x2B, 59,   /* 0000 0010 1011 */\n  12, 0x2C, 60,   /* 0000 0010 1100 */\n  12, 0x5A, 61,   /* 0000 0101 1010 */\n  12, 0x66, 62,   /* 0000 0110 0110 */\n  12, 0x67, 63,   /* 0000 0110 0111 */\n  10, 0xF, 64,    /* 0000 0011 11 */\n  12, 0xC8, 128,  /* 0000 1100 1000 */\n  12, 0xC9, 192,  /* 0000 1100 1001 */\n  12, 0x5B, 256,  /* 0000 0101 1011 */\n  12, 0x33, 320,  /* 0000 0011 0011 */\n  12, 0x34, 384,  /* 0000 0011 0100 */\n  12, 0x35, 448,  /* 0000 0011 0101 */\n  13, 0x6C, 512,  /* 0000 0011 0110 0 */\n  13, 0x6D, 576,  /* 0000 0011 0110 1 */\n  13, 0x4A, 640,  /* 0000 0010 0101 0 */\n  13, 0x4B, 704,  /* 0000 0010 0101 1 */\n  13, 0x4C, 768,  /* 0000 0010 0110 0 */\n  13, 0x4D, 832,  /* 0000 0010 0110 1 */\n  13, 0x72, 896,  /* 0000 0011 1001 0 */\n  13, 0x73, 960,  /* 0000 0011 1001 1 */\n  13, 0x74, 1024, /* 0000 0011 1010 0 */\n  13, 0x75, 1088, /* 0000 0011 1010 1 */\n  13, 0x76, 1152, /* 0000 0011 1011 0 */\n  13, 0x77, 1216, /* 0000 0011 1011 1 */\n  13, 0x52, 1280, /* 0000 0010 1001 0 */\n  13, 0x53, 1344, /* 0000 0010 1001 1 */\n  13, 0x54, 1408, /* 0000 0010 1010 0 */\n  13, 0x55, 1472, /* 0000 0010 1010 1 */\n  13, 0x5A, 1536, /* 0000 0010 1101 0 */\n  13, 0x5B, 1600, /* 0000 0010 1101 1 */\n  13, 0x64, 1664, /* 0000 0011 0010 0 */\n  13, 0x65, 1728, /* 0000 0011 0010 1 */\n  11, 0x8, 1792,  /* 0000 0001 000 */\n  11, 0xC, 1856,  /* 0000 0001 100 */\n  11, 0xD, 1920,  /* 0000 0001 101 */\n  12, 0x12, 1984, /* 0000 0001 0010 */\n  12, 0x13, 2048, /* 0000 0001 0011 */\n  12, 0x14, 2112, /* 0000 0001 0100 */\n  12, 0x15, 2176, /* 0000 0001 0101 */\n  12, 0x16, 2240, /* 0000 0001 0110 */\n  12, 0x17, 2304, /* 0000 0001 0111 */\n  12, 0x1C, 2368, /* 0000 0001 1100 */\n  12, 0x1D, 2432, /* 0000 0001 1101 */\n  12, 0x1E, 2496, /* 0000 0001 1110 */\n  12, 0x1F, 2560, /* 0000 0001 1111 */\n  12, 0x1, -1,    /* 0000 0000 0001 */\n];\n\nfunction createFaxCodeArray(array) {\n  let result = [];\n  for (let i = 0; i < array.length; i += 3) {\n    result.push(new FaxCode(array[i], array[i + 1], array[i + 2]));\n  }\n  result.sort((a, b) => a.bitLength - b.bitLength);\n  return result;\n}\n\nexport class FaxCode {\n  static WHITE_CODES = createFaxCodeArray(WHITE_CODES);\n  static BLACK_CODES = createFaxCodeArray(BLACK_CODES);\n\n  constructor(bitLength, code, runLength) {\n    this.bitLength = bitLength;\n    this.code = code;\n    this.runLength = runLength;\n  }\n}\n","import { countOnes, trailingZeros } from \"../../util/math-utils\";\nimport { FaxCode } from \"./fax-code\";\n\nconst LOOKUP_TABLE_3_BIT_TO_8_BIT = [0, 36, 73, 109, 146, 182, 219, 255];\n\nconst LOOKUP_TABLE_4_BIT_TO_8_BIT = [\n  0, 17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255,\n];\n\nconst LOOKUP_TABLE_5_BIT_TO_8_BIT = [\n  0, 8, 16, 25, 33, 41, 49, 58, 66, 74, 82, 90, 99, 107, 115, 123, 132, 140,\n  148, 156, 165, 173, 181, 189, 197, 206, 214, 222, 230, 239, 247, 255,\n];\n\nconst LOOKUP_TABLE_6_BIT_TO_8_BIT = [\n  0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 45, 49, 53, 57, 61, 65, 69, 73, 77,\n  81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 130, 134, 138, 142,\n  146, 150, 154, 158, 162, 166, 170, 174, 178, 182, 186, 190, 194, 198, 202,\n  206, 210, 215, 219, 223, 227, 231, 235, 239, 243, 247, 251, 255,\n];\n\nconst HeaderType = {\n  Core: \"BITMAPCOREHEADER\",\n  Core2: \"BITMAPCOREHEADER2\",\n  Info: \"BITMAPINFOHEADER\",\n  V2: \"BITMAPV2INFOHEADER\",\n  V3: \"BITMAPV3INFOHEADER\",\n  V4: \"BITMAPV4HEADER\",\n  V5: \"BITMAPV5HEADER\",\n};\n\nconst Compression = {\n  RGB: \"BI_RGB\",\n  RLE8: \"BI_RLE8\",\n  RLE4: \"BI_RLE4\",\n  Bitfields: \"BI_BITFIELDS\",\n  Huffman1D: \"BI_HUFFMAN1D\",\n  RLE24: \"BI_RLE24\",\n  JPEG: \"BI_JPEG\",\n  PNG: \"BI_PNG\",\n  AlphaBitfields: \"BI_ALPHABITFIELDS\",\n  CMYK: \"BI_CMYK\",\n  CMYKRLE8: \"BI_CMYKRLE8\",\n  CMYKRLE4: \"BI_CMYKRLE4\",\n};\n\nclass PaletteColor {\n  constructor(b, g, r) {\n    this.b = b;\n    this.g = g;\n    this.r = r;\n  }\n}\n\n// Bitfield(s) implementation is based directly on the image-rs BMPDecoder\n// See: https://github.com/image-rs/image/blob/v0.24.4/src/codecs/bmp/decoder.rs#L479\nclass Bitfield {\n  constructor(length, shift) {\n    this.length = length;\n    this.shift = shift;\n  }\n\n  static fromMask(mask, maxLength) {\n    if (mask === 0) {\n      return new Bitfield(0, 0);\n    }\n\n    let shift = trailingZeros(mask);\n    let length = trailingZeros(~(mask >>> shift));\n\n    if (length !== countOnes(mask)) {\n      throw new Error(\"Non-contiguous bitfield mask\");\n    }\n\n    if (length + shift > maxLength) {\n      throw new Error(\"Bitfield mask too long\");\n    }\n\n    if (length > 8) {\n      shift += length - 8;\n      length = 8;\n    }\n\n    return new Bitfield(length, shift);\n  }\n\n  read(data) {\n    data = data >> this.shift;\n    switch (this.length) {\n      case 0:\n        return 0;\n      case 1:\n        return (data & 0b1) * 0xff;\n      case 2:\n        return (data & 0b11) * 0x55;\n      case 3:\n        return LOOKUP_TABLE_3_BIT_TO_8_BIT[data & 0b00_0111];\n      case 4:\n        return LOOKUP_TABLE_4_BIT_TO_8_BIT[data & 0b00_1111];\n      case 5:\n        return LOOKUP_TABLE_5_BIT_TO_8_BIT[data & 0b01_1111];\n      case 6:\n        return LOOKUP_TABLE_6_BIT_TO_8_BIT[data & 0b11_1111];\n      case 7:\n        return ((data & 0x7f) << 1) | ((data & 0x7f) >> 6);\n      case 8:\n        return data & 0xff;\n      default:\n        throw new Error(`Unhandled bitfield mask length ${this.length}`);\n    }\n  }\n}\n\nclass Bitfields {\n  constructor(r, g, b, a) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n  static fromMask(redMask, greenMask, blueMask, alphaMask, maxLength) {\n    return new Bitfields(\n      Bitfield.fromMask(redMask, maxLength),\n      Bitfield.fromMask(greenMask, maxLength),\n      Bitfield.fromMask(blueMask, maxLength),\n      Bitfield.fromMask(alphaMask, maxLength)\n    );\n  }\n}\n\nexport class DIBReader {\n  constructor(buffer) {\n    this.data = buffer;\n    this.dataView = new DataView(buffer);\n\n    this.headerType = null;\n    this.compression = null;\n    this.readStrategy = null;\n    this.bitFields = null;\n    this.paletteColors = null;\n\n    this.initialized = false;\n  }\n\n  readUint8(position) {\n    return this.dataView.getUint8(position);\n  }\n\n  readUint16(position) {\n    return this.dataView.getUint16(position, true);\n  }\n\n  readUint32(position) {\n    return this.dataView.getUint32(position, true);\n  }\n\n  readInt32(position) {\n    return this.dataView.getInt32(position, true);\n  }\n\n  get headerSize() {\n    return this.readUint32(0);\n  }\n\n  get width() {\n    if (this.headerType === HeaderType.Core) {\n      return this.readUint16(4);\n    } else {\n      return this.readInt32(4);\n    }\n  }\n\n  get height() {\n    if (this.headerType === HeaderType.Core) {\n      return this.readUint16(6);\n    } else {\n      return this.readInt32(8);\n    }\n  }\n\n  get planes() {\n    if (this.headerType === HeaderType.Core) {\n      return this.readUint16(8);\n    } else {\n      return this.readUint16(12);\n    }\n  }\n\n  get depth() {\n    if (this.headerType === HeaderType.Core) {\n      return this.readUint16(10);\n    } else {\n      return this.readUint16(14);\n    }\n  }\n\n  get colorsUsed() {\n    if (this.headerSize < 36) {\n      return 0;\n    } else {\n      return this.readUint32(32);\n    }\n  }\n\n  get optionalBitMasksSize() {\n    // Present only in case the DIB header is the BITMAPINFOHEADER and the\n    // Compression Method member is set to either BI_BITFIELDS or BI_ALPHABITFIELDS\n    if (this.headerType === HeaderType.Info) {\n      switch (this.compression) {\n        case Compression.Bitfields:\n          return 12;\n        case Compression.AlphaBitfields:\n          return 16;\n        default:\n        // do nothing\n      }\n    }\n\n    return 0;\n  }\n\n  get paletteColorCount() {\n    if (this.colorsUsed) {\n      return this.colorsUsed;\n    } else if (this.depth <= 8) {\n      return 1 << this.depth;\n    } else {\n      return 0;\n    }\n  }\n\n  get paletteSize() {\n    const bytesPerColor = this.headerType === HeaderType.Core ? 3 : 4;\n    return this.paletteColorCount * bytesPerColor;\n  }\n\n  get stride() {\n    return ((this.width * this.depth + 31) & ~31) >> 3;\n  }\n\n  get hasBitMasks() {\n    switch (this.headerType) {\n      case HeaderType.Core:\n      case HeaderType.Core2:\n        return false;\n      case HeaderType.Info:\n        return (\n          this.compression === Compression.Bitfields ||\n          this.compression === Compression.AlphaBitfields\n        );\n      default:\n        return true;\n    }\n  }\n\n  get redMask() {\n    if (!this.hasBitMasks) {\n      return 0;\n    } else {\n      return this.readUint32(40);\n    }\n  }\n\n  get greenMask() {\n    if (!this.hasBitMasks) {\n      return 0;\n    } else {\n      return this.readUint32(44);\n    }\n  }\n\n  get blueMask() {\n    if (!this.hasBitMasks) {\n      return 0;\n    } else {\n      return this.readUint32(48);\n    }\n  }\n\n  get alphaMask() {\n    if (!this.hasBitMasks || this.headerType === HeaderType.V2) {\n      return 0;\n    } else {\n      this.readUint32(52);\n    }\n  }\n\n  colorFromPalette(index) {\n    this.initialize();\n\n    if (index >= this.paletteColors.length) {\n      return new PaletteColor(0, 0, 0);\n    }\n\n    return this.paletteColors[index];\n  }\n\n  validateHeader() {\n    if (\n      this.dataView.byteLength < 4 ||\n      this.dataView.byteLength < this.headerSize\n    ) {\n      throw new Error(\"Truncated header\");\n    }\n\n    if (!Object.values(HeaderType).includes(this.headerType)) {\n      throw new Error(`Unknown header type with size ${this.headerSize}`);\n    }\n\n    if (!Object.values(Compression).includes(this.compression)) {\n      throw new Error(\"Unknown compression type\");\n    }\n\n    if (this.width <= 0) {\n      throw new Error(\"Image width must be positive\");\n    }\n\n    if (this.height === 0) {\n      throw new Error(\"Image height cannot be zero\");\n    }\n\n    if (\n      this.height < 0 &&\n      [HeaderType.Core, HeaderType.Core2].includes(this.headerType)\n    ) {\n      throw new Error(`Top-down bitmaps not supported for ${this.headerType}`);\n    }\n\n    if (\n      this.width > 0x40000000 ||\n      this.height < -0x40000000 ||\n      this.height > 0x40000000\n    ) {\n      throw new Error(\"Image dimensions out of bounds\");\n    }\n\n    if (this.planes !== 1) {\n      throw new Error(`Invalid number of color planes (${this.planes})`);\n    }\n\n    switch (this.headerType) {\n      case HeaderType.Core:\n        this.validateHeaderTypeDepth(1, 2, 4, 8, 24);\n        break;\n      case HeaderType.Core2:\n        this.validateHeaderTypeDepth(1, 2, 4, 8, 24);\n        this.validateHeaderTypeCompression(\n          Compression.RGB,\n          Compression.RLE8,\n          Compression.RLE4,\n          Compression.Huffman1D,\n          Compression.RLE24\n        );\n        break;\n      default:\n        this.validateHeaderTypeDepth(1, 2, 4, 8, 16, 24, 32);\n        this.validateHeaderTypeCompression(\n          Compression.RGB,\n          Compression.RLE8,\n          Compression.RLE4,\n          Compression.Bitfields,\n          Compression.JPEG,\n          Compression.PNG,\n          Compression.AlphaBitfields\n        );\n    }\n\n    switch (this.compression) {\n      case Compression.RGB:\n        this.validateCompressionDepth(1, 2, 4, 8, 16, 24, 32);\n        break;\n\n      case Compression.RLE8:\n        this.validateCompressionDepth(8);\n        break;\n\n      case Compression.RLE4:\n        this.validateCompressionDepth(4);\n        break;\n\n      case Compression.Bitfields:\n      case Compression.AlphaBitfields:\n        this.validateCompressionDepth(16, 32);\n        break;\n\n      case Compression.Huffman1D:\n        this.validateCompressionDepth(1);\n        break;\n\n      case Compression.RLE24:\n        this.validateCompressionDepth(24);\n        break;\n\n      default:\n        throw new Error(`Unsupported compression (${this.compression})`);\n    }\n\n    if (this.colorsUsed > 1 << this.depth) {\n      throw new Error(\n        `Palette size ${this.paletteColorCount} exceeds maximum value for ${this.depth}-bit image`\n      );\n    }\n  }\n\n  validateHeaderTypeDepth(...allowedDepths) {\n    if (!allowedDepths.includes(this.depth)) {\n      throw new Error(\n        `Invalid bit depth for ${this.headerType} (${this.depth})`\n      );\n    }\n  }\n\n  validateHeaderTypeCompression(...allowedCompressions) {\n    if (!allowedCompressions.includes(this.compression)) {\n      throw new Error(\n        `Invalid compression for ${this.headerType} (${this.compression})`\n      );\n    }\n  }\n\n  validateCompressionDepth(...allowedDepths) {\n    if (!allowedDepths.includes(this.depth)) {\n      throw new Error(\n        `Invalid bit depth for ${this.compression} (${this.depth})`\n      );\n    }\n  }\n\n  determineHeaderType() {\n    if (this.dataView.byteLength < 4) {\n      return;\n    }\n\n    const size = this.headerSize;\n\n    switch (size) {\n      case 12:\n        this.headerType = HeaderType.Core;\n        break;\n      case 40:\n        this.headerType = HeaderType.Info;\n        break;\n      case 52:\n        this.headerType = HeaderType.V2;\n        break;\n      case 56:\n        this.headerType = HeaderType.V3;\n        break;\n      case 108:\n        this.headerType = HeaderType.V4;\n        break;\n      case 124:\n        this.headerType = HeaderType.V5;\n        break;\n      default:\n        if (this.detectCoreHeader2WithSizeHeuristic()) {\n          this.headerType = HeaderType.Core2;\n        }\n    }\n\n    if (this.detectCoreHeader2WithCompressionTypeHeuristic()) {\n      this.headerType = HeaderType.Core2;\n    }\n  }\n\n  detectCoreHeader2WithSizeHeuristic() {\n    const size = this.headerSize;\n    // BITMAPCOREHEADER2 headers are variable-sized.\n    // Any multiple of 4 between 16 and 64, or 42, or 46.\n    return (\n      size >= 16 && size <= 64 && (size % 4 === 0 || size === 42 || size === 46)\n    );\n  }\n\n  detectCoreHeader2WithCompressionTypeHeuristic() {\n    if (this.headerSize >= 20 && this.dataView.byteLength >= 20) {\n      const compression = this.readUint32(16);\n      if (compression === 3 && this.depth === 1) {\n        // HUFFMAN1D\n        return true;\n      }\n      if (compression === 4 && this.depth === 24) {\n        // RLE24\n        return true;\n      }\n    }\n    return false;\n  }\n\n  determineCompression() {\n    if (this.headerSize < 20) {\n      this.compression = Compression.RGB;\n      return;\n    }\n\n    if (this.dataView.byteLength < 20) {\n      this.compression = null;\n      return;\n    }\n\n    switch (this.readUint32(16)) {\n      case 0:\n        this.compression = Compression.RGB;\n        break;\n      case 1:\n        this.compression = Compression.RLE8;\n        break;\n      case 2:\n        this.compression = Compression.RLE4;\n        break;\n      case 3:\n        this.compression =\n          this.headerType === HeaderType.Core2\n            ? Compression.Huffman1D\n            : Compression.Bitfields;\n        break;\n      case 4:\n        this.compression =\n          this.headerType === HeaderType.Core2\n            ? Compression.RLE24\n            : Compression.JPEG;\n        break;\n      case 5:\n        this.compression = Compression.PNG;\n        break;\n      case 6:\n        this.compression = Compression.AlphaBitfields;\n        break;\n      case 11:\n        this.compression = Compression.CMYK;\n        break;\n      case 12:\n        this.compression = Compression.CMYKRLE8;\n        break;\n      case 13:\n        this.compression = Compression.CMYKRLE4;\n        break;\n      default:\n        this.compression = null;\n        break;\n    }\n  }\n\n  determineReadStrategy() {\n    switch (this.compression) {\n      case Compression.RLE4:\n      case Compression.RLE8:\n      case Compression.RLE24:\n        this.readStrategy = new RLEReadStrategy(this);\n        return;\n      case Compression.Huffman1D:\n        this.readStrategy = new HuffmanReadStrategy(this);\n        return;\n      default:\n      // do nothing\n    }\n\n    switch (this.depth) {\n      case 1:\n      case 2:\n      case 4:\n      case 8:\n        this.readStrategy = new PalettedReadStrategy(this);\n        break;\n      case 16:\n      case 24:\n      case 32:\n        this.readStrategy = new RGBReadStrategy(this);\n        break;\n      default:\n        throw Error(`Unhandled bit depth: ${this.depth}`);\n    }\n  }\n\n  decodeBitfields() {\n    if (\n      [Compression.Bitfields, Compression.AlphaBitfields].includes(\n        this.compression\n      )\n    ) {\n      this.bitFields = Bitfields.fromMask(\n        this.redMask,\n        this.greenMask,\n        this.blueMask,\n        this.alphaMask,\n        this.depth\n      );\n    } else {\n      switch (this.depth) {\n        case 16:\n          this.bitFields = Bitfields.fromMask(\n            0x00007c00,\n            0x000003e0,\n            0x0000001f,\n            0x00000000,\n            this.depth\n          );\n          break;\n\n        case 24:\n        case 32:\n          this.bitFields = Bitfields.fromMask(\n            0x00ff0000,\n            0x0000ff00,\n            0x000000ff,\n            0x00000000,\n            this.depth\n          );\n          break;\n      }\n    }\n  }\n\n  indexPalette() {\n    if (this.depth > 8) {\n      return;\n    }\n\n    this.paletteColors = new Array(this.paletteColorCount);\n    let pos = this.headerSize + this.optionalBitMasksSize;\n\n    for (let i = 0; i < this.paletteColors.length; ++i) {\n      this.paletteColors[i] = new PaletteColor(\n        this.readUint8(pos++),\n        this.readUint8(pos++),\n        this.readUint8(pos++)\n      );\n\n      if (this.headerType !== HeaderType.Core) {\n        // rgbReserved is reserved and must be zero\n        // See: https://learn.microsoft.com/en-us/windows/win32/api/wingdi/ns-wingdi-rgbquad\n        pos++;\n      }\n    }\n  }\n\n  initialize() {\n    if (this.initialized) {\n      return;\n    }\n\n    this.determineHeaderType();\n    this.determineCompression();\n    this.validateHeader();\n    this.determineReadStrategy();\n    this.decodeBitfields();\n    this.indexPalette();\n\n    this.initialized = true;\n  }\n\n  read() {\n    this.initialize();\n\n    const outputSize = this.width * Math.abs(this.height) * 4;\n    const imageData = new Uint8ClampedArray(outputSize);\n    this.readStrategy.read(imageData);\n\n    return imageData;\n  }\n}\n\nclass ReadStrategy {\n  constructor(reader) {\n    this.reader = reader;\n    this.width = this.reader.width;\n    this.height = this.reader.height;\n  }\n\n  read(_outBuffer) {\n    throw new Error(\"ReadStrategy.read() must be implemented\");\n  }\n\n  getAlpha(r, g, b) {\n    if (r !== 0 || g !== 0 || b !== 0) {\n      return 0xff;\n    } else {\n      return 0x00;\n    }\n  }\n}\n\nclass LineByLineReadStrategy extends ReadStrategy {\n  read(outBuffer) {\n    const rowCount = Math.abs(this.height);\n    const isTopDown = this.height < 0;\n\n    for (let row = 0; row < rowCount; ++row) {\n      const line = isTopDown ? row : this.height - 1 - row;\n\n      const outPos = this.width * row * 4;\n      const linePos =\n        this.reader.headerSize +\n        this.reader.optionalBitMasksSize +\n        this.reader.paletteSize +\n        this.reader.stride * line;\n\n      this.readLine(outBuffer, outPos, linePos);\n    }\n  }\n\n  readLine(_outBuffer, _outPos, _linePos) {\n    throw new Error(\"LineByLineReadStrategy.readLine() must be implemented\");\n  }\n}\n\nclass RGBReadStrategy extends LineByLineReadStrategy {\n  constructor(reader) {\n    super(reader);\n    this.bytesPerPixel = this.reader.depth >> 3;\n  }\n\n  readLine(outBuffer, outPos, linePos) {\n    for (let i = 0; i < this.width; ++i) {\n      let r = 0;\n      let g = 0;\n      let b = 0;\n\n      let p = this.readUint32WithZeroPadding(linePos);\n      r = this.bitFields.r.read(p);\n      g = this.bitFields.g.read(p);\n      b = this.bitFields.b.read(p);\n\n      outBuffer[outPos++] = r;\n      outBuffer[outPos++] = g;\n      outBuffer[outPos++] = b;\n      outBuffer[outPos++] = this.getAlpha(r, g, b);\n\n      linePos += this.bytesPerPixel;\n    }\n  }\n\n  readUint32WithZeroPadding(position) {\n    if (position + 4 <= this.reader.dataView.byteLength) {\n      return this.reader.readUint32(position);\n    }\n\n    let bytes = new Uint8Array([0, 0, 0, 0]);\n\n    for (let i = 0; i < bytes.length; ++i) {\n      if (position >= this.reader.dataView.byteLength) {\n        break;\n      }\n      bytes[i] = this.reader.readUint8(position++);\n    }\n\n    return new DataView(bytes.buffer).getUint32(0, true);\n  }\n\n  get bitFields() {\n    return this.reader.bitFields;\n  }\n}\n\nclass PalettedReadStrategy extends LineByLineReadStrategy {\n  constructor(reader) {\n    super(reader);\n    this.pixelsPerByte = 8 / this.reader.depth;\n    this.bytesPerLine = Math.ceil(this.width / this.pixelsPerByte);\n    this.getPaletteIndices =\n      PalettedReadStrategy.createGetPaletteIndicesFunction(this.reader.depth);\n  }\n\n  static createGetPaletteIndicesFunction(depth) {\n    switch (depth) {\n      case 1:\n        return (byte) => {\n          let indices = new Array(8);\n          for (let i = 0; i < 8; ++i) {\n            indices[7 - i] = (byte & (1 << i)) >> i;\n          }\n          return indices;\n        };\n      case 2:\n        return (byte) => {\n          return [\n            (byte & 0xc0) >> 6,\n            (byte & 0x30) >> 4,\n            (byte & 0x0c) >> 2,\n            byte & 0x03,\n          ];\n        };\n      case 4:\n        return (byte) => {\n          return [(byte & 0xf0) >> 4, byte & 0x0f];\n        };\n      case 8:\n        return (byte) => {\n          return [byte];\n        };\n      default:\n        throw Error(`Unhandled bit depth: ${depth}`);\n    }\n  }\n\n  readLine(outBuffer, outPos, linePos) {\n    let written = 0;\n\n    for (let i = 0; i < this.bytesPerLine; ++i) {\n      const byte = this.readUint8WithZeroPadding(linePos);\n      const paletteIndices = this.getPaletteIndices(byte);\n\n      for (let paletteIndex of paletteIndices) {\n        const color = this.reader.colorFromPalette(paletteIndex);\n        const { b, g, r } = color;\n\n        outBuffer[outPos++] = r;\n        outBuffer[outPos++] = g;\n        outBuffer[outPos++] = b;\n        outBuffer[outPos++] = this.getAlpha(r, g, b);\n\n        if (++written === this.width) {\n          return;\n        }\n      }\n\n      ++linePos;\n    }\n  }\n\n  readUint8WithZeroPadding(position) {\n    if (position < this.reader.dataView.byteLength) {\n      return this.reader.readUint8(position);\n    }\n    return 0;\n  }\n}\n\n// See: https://learn.microsoft.com/en-us/windows/win32/gdi/bitmap-compression\nclass RLEReadStrategy extends ReadStrategy {\n  constructor(reader) {\n    super(reader);\n    this.compression = reader.compression;\n    this.setPixelGenerator = RLEReadStrategy.createSetPixelGeneratorFunction(\n      this.compression\n    );\n    this.dataPos = null;\n    this.x = null;\n    this.y = null;\n  }\n\n  static createSetPixelGeneratorFunction(compression) {\n    switch (compression) {\n      case Compression.RLE8:\n        return function* (outBuffer) {\n          let color = this.reader.colorFromPalette(this.readUint8());\n          while (true) {\n            this.setPixel(color.r, color.g, color.b, outBuffer);\n            yield;\n          }\n        };\n\n      case Compression.RLE4:\n        return function* (outBuffer) {\n          const indices = this.readUint8();\n          let color = null;\n          let i = 0;\n          while (true) {\n            switch (i++ % 2) {\n              case 0:\n                color = this.reader.colorFromPalette((indices & 0xf0) >> 4);\n                break;\n              case 1:\n                color = this.reader.colorFromPalette(indices & 0x0f);\n                break;\n            }\n            this.setPixel(color.r, color.g, color.b, outBuffer);\n            yield;\n          }\n        };\n\n      case Compression.RLE24:\n        return function* (outBuffer) {\n          const b = this.readUint8();\n          const g = this.readUint8();\n          const r = this.readUint8();\n          while (true) {\n            this.setPixel(r, g, b, outBuffer);\n            yield;\n          }\n        };\n    }\n  }\n\n  init() {\n    this.dataPos =\n      this.reader.headerSize +\n      this.reader.optionalBitMasksSize +\n      this.reader.paletteSize;\n    this.x = 0;\n    this.y = 0;\n  }\n\n  peekInstruction() {\n    if (this.reader.readUint8(this.dataPos) === 0) {\n      return this.reader.readUint8(this.dataPos + 1);\n    }\n    return null;\n  }\n\n  validatePosition() {\n    if (this.x >= this.width || this.y >= Math.abs(this.height)) {\n      throw new Error(\"Image output position out of bounds\");\n    }\n  }\n\n  offsetCursor(x, y) {\n    this.x += x;\n    this.y += y;\n    if (this.peekInstruction() === 1) {\n      // End of bitmap\n      return;\n    }\n    this.validatePosition();\n  }\n\n  nextLine() {\n    this.x = 0;\n    this.y++;\n    if (this.peekInstruction() === 1) {\n      // End of bitmap\n      return;\n    }\n    this.validatePosition();\n  }\n\n  setPixel(r, g, b, outBuffer) {\n    const isTopDown = this.height < 0;\n    const line = isTopDown ? this.y : this.height - 1 - this.y;\n    const pos = (this.width * line + this.x) * 4;\n\n    outBuffer[pos + 0] = r;\n    outBuffer[pos + 1] = g;\n    outBuffer[pos + 2] = b;\n    outBuffer[pos + 3] = this.getAlpha(r, g, b);\n\n    this.x++;\n  }\n\n  executeInstruction(instruction, outBuffer) {\n    switch (instruction) {\n      // End of line\n      case 0:\n        this.nextLine();\n        break;\n\n      // End of bitmap\n      case 1:\n        return false;\n\n      // Delta\n      case 2:\n        this.offsetCursor(this.readUint8(), this.readUint8());\n        break;\n\n      // Absolute\n      default:\n        const length = instruction;\n        this.readAbsoluteMode(length, outBuffer);\n        break;\n    }\n\n    return true;\n  }\n\n  readAbsoluteMode(length, outBuffer) {\n    let i = 0;\n    let generator = null;\n\n    while (i < length) {\n      if (this.x === this.width) {\n        // Absolute mode cannot span multiple rows\n        return false;\n      }\n      if (this.compression !== Compression.RLE4 || i % 2 === 0) {\n        generator = this.setPixelGenerator(outBuffer);\n      }\n      generator.next();\n      ++i;\n    }\n\n    // In absolute mode, each run must be aligned on a word boundary.\n    this.dataPos += this.dataPos & 1;\n  }\n\n  readEncodedMode(length, outBuffer) {\n    const generator = this.setPixelGenerator(outBuffer);\n    for (let i = 0; i < length; ++i) {\n      if (this.x === this.width) {\n        this.nextLine();\n        break;\n      }\n      generator.next();\n    }\n  }\n\n  read(outBuffer) {\n    this.init();\n\n    while (this.dataPos < this.dataLength) {\n      const controlByte = this.readUint8();\n      if (controlByte === 0) {\n        const instruction = this.readUint8();\n        if (!this.executeInstruction(instruction, outBuffer)) {\n          break;\n        }\n      } else {\n        // Encoded mode\n        const length = controlByte;\n        this.readEncodedMode(length, outBuffer);\n      }\n    }\n\n    return this.imageData;\n  }\n\n  readUint8() {\n    try {\n      return this.reader.readUint8(this.dataPos++);\n    } catch (e) {\n      throw new Error(\"Ran out of RLE data\");\n    }\n  }\n\n  get dataLength() {\n    return this.reader.dataView.byteLength;\n  }\n}\n\nconst RunType = {\n  White: 0,\n  Black: 1,\n};\n\nconst RunResult = {\n  Continue: 0,\n  EOL: 1,\n  EOF: 2,\n};\n\n// Based on ReadHuffmanG31D from Clowd.Clipboard\n//\n// See:\n// https://github.com/clowd/Clowd.Clipboard/blob/c46ff3b83a22ac05822be67266e314207e48978f/src/Clowd.Clipboard/Bitmaps/BitmapCorePixelReader.cs#L455\nclass HuffmanReadStrategy extends ReadStrategy {\n  constructor(reader) {\n    super(reader);\n    this.dataPos = null;\n    this.firstCode = null;\n    this.currentCode = null;\n    this.bitsRemaining = null;\n    this.x = null;\n  }\n\n  init() {\n    this.dataPos = this.reader.headerSize + this.reader.paletteSize;\n    this.firstCode = true;\n    this.currentCode = 0;\n    this.bitsRemaining = 0;\n  }\n\n  readCode(faxCodes) {\n    for (const faxCode of faxCodes) {\n      while (this.bitsRemaining < faxCode.bitLength) {\n        if (this.dataPos >= this.reader.dataView.byteLength) {\n          return null;\n        }\n\n        this.currentCode <<= 8;\n        this.currentCode |= this.readUint8();\n        this.bitsRemaining += 8;\n      }\n\n      if (\n        faxCode.code ===\n        this.currentCode >>> (this.bitsRemaining - faxCode.bitLength)\n      ) {\n        this.bitsRemaining -= faxCode.bitLength;\n\n        const mask = (1 << this.bitsRemaining) - 1;\n        this.currentCode &= mask;\n\n        if (this.firstCode && faxCode.runLength < 0) {\n          // Sometimes the data stream starts with an EOL code, let's skip it.\n          this.firstCode = false;\n          return this.readCode(faxCodes);\n        }\n\n        this.firstCode = false;\n        return faxCode;\n      }\n    }\n    return null;\n  }\n\n  readRun(runType, outBuffer) {\n    let color;\n    let faxCodes;\n\n    switch (runType) {\n      case RunType.White:\n        color = 0xff;\n        faxCodes = FaxCode.WHITE_CODES;\n        break;\n      case RunType.Black:\n        color = 0x00;\n        faxCodes = FaxCode.BLACK_CODES;\n        break;\n      default:\n        throw new Error(`Unhandled RunType: ${runType}`);\n    }\n\n    let code;\n\n    while (true) {\n      code = this.readCode(faxCodes);\n      if (!code) {\n        return RunResult.EOF;\n      }\n\n      if (code.runLength > 0) {\n        let pos = (this.y * this.width + this.x) * 4;\n        for (let i = 0; i < code.runLength; ++i) {\n          outBuffer[pos++] = color;\n          outBuffer[pos++] = color;\n          outBuffer[pos++] = color;\n          outBuffer[pos++] = this.getAlpha(color, color, color);\n          this.x++;\n        }\n      }\n\n      if (code.runLength < 64) {\n        // EOL or terminating code\n        break;\n      }\n    }\n\n    if (code.runLength < 0) {\n      return RunResult.EOL;\n    }\n\n    return RunResult.Continue;\n  }\n\n  read(outBuffer) {\n    this.init();\n\n    for (this.y = this.height - 1; this.y >= 0; --this.y) {\n      this.x = 0;\n\n      while (true) {\n        {\n          const result = this.readRun(RunType.White, outBuffer);\n\n          if (result === RunResult.EOL) {\n            break;\n          }\n\n          if (result === RunResult.EOF) {\n            return;\n          }\n        }\n\n        {\n          const result = this.readRun(RunType.Black, outBuffer);\n\n          if (result === RunResult.EOL) {\n            break;\n          }\n\n          if (result === RunResult.EOF) {\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  readUint8() {\n    return this.reader.readUint8(this.dataPos++);\n  }\n}\n","const ResourceType = {\n  CURSOR: 1,\n  BITMAP: 2,\n  ICON: 3,\n  MENU: 4,\n  DIALOG: 5,\n  STRING_TABLE: 6,\n  FONT_DIRECTORY: 7,\n  FONT: 8,\n  ACCELERATOR: 9,\n  UNFORMATTED: 10,\n  MESSAGE_TABLE: 11,\n  GROUP_CURSOR: 12,\n  GROUP_ICON: 14,\n  VERSION_INFORMATION: 16,\n};\n\nclass ResourceDirectoryEntry {\n  constructor(resourceType, subdirectoryOffset) {\n    this.resourceType = resourceType;\n    this.subdirectoryOffset = subdirectoryOffset;\n  }\n}\n\nclass ResourceDataEntry {\n  constructor(offset, size, codePage, unused) {\n    this.offset = offset;\n    this.size = size;\n    this.codePage = codePage;\n    this.unused = unused;\n  }\n}\n\nclass ResourceInfo {\n  constructor(start, size, width, height) {\n    this.start = start;\n    this.size = size;\n    this.width = width;\n    this.height = height;\n  }\n}\n\nexport class PEReader {\n  constructor(buffer) {\n    this.file = buffer;\n    this.dataView = new DataView(buffer);\n    this.position = 0;\n    this.virtualAddress = 0;\n    this.rootAddress = 0;\n\n    this.bitmapDirectoryEntry = new ResourceDirectoryEntry();\n    this.resourceInfo = new Map();\n\n    this.readHeader();\n    this.readBitmapTable();\n  }\n\n  seek(position) {\n    this.position = position;\n  }\n\n  skip(offset) {\n    this.position += offset;\n  }\n\n  readUint16() {\n    let result = this.dataView.getUint16(this.position, true);\n    this.position += 2;\n    return result;\n  }\n\n  readUint32() {\n    let result = this.dataView.getUint32(this.position, true);\n    this.position += 4;\n    return result;\n  }\n\n  readInt32() {\n    let result = this.dataView.getInt32(this.position, true);\n    this.position += 4;\n    return result;\n  }\n\n  readString(length) {\n    let decoder = new TextDecoder(\"utf-8\");\n    let result = decoder.decode(\n      new Uint8Array(this.file.slice(this.position, this.position + length))\n    );\n    this.position += length;\n    return result;\n  }\n\n  readDirectoryEntryCount() {\n    this.skip(0x0c);\n    let namedEntries = this.readUint16();\n    let idEntries = this.readUint16();\n    return namedEntries + idEntries;\n  }\n\n  readResourceDirectoryEntry() {\n    let resourceType = this.readUint32();\n    let subdirectoryOffset = this.readUint32();\n    return new ResourceDirectoryEntry(resourceType, subdirectoryOffset);\n  }\n\n  readResourceDataEntry() {\n    let offset = this.readUint32();\n    let size = this.readUint32();\n    let codePage = this.readUint32();\n    let unused = this.readUint32();\n    return new ResourceDataEntry(offset, size, codePage, unused);\n  }\n\n  readHeader() {\n    this.seek(0x3c);\n    let peHeaderAddress = this.readUint16();\n\n    this.skip(peHeaderAddress - 0x3c - 0x02);\n    let type = this.readString(4);\n    if (type !== \"PE\\0\\0\") {\n      throw new Error(\"Invalid PE file signature\");\n    }\n\n    this.skip(0x02);\n    let sections = this.readUint16();\n\n    this.skip(0x78 - 0x04 + 0x0c);\n    this.virtualAddress = this.readUint32();\n\n    this.skip(0x6c + 0x08 + 0x04);\n\n    for (let i = 0; i < sections; ++i) {\n      let checkVirtualAddress = this.readUint32();\n      if (checkVirtualAddress == this.virtualAddress) {\n        this.skip(0x04);\n        this.rootAddress = this.readUint32();\n        break;\n      }\n      this.skip(0x24);\n    }\n\n    if (this.rootAddress == 0) {\n      throw new Error(\"Invalid root address\");\n    }\n\n    this.seek(this.rootAddress);\n    let directoryEntryCount = this.readDirectoryEntryCount();\n\n    for (let i = 0; i < directoryEntryCount; ++i) {\n      let directoryEntry = this.readResourceDirectoryEntry();\n      if (directoryEntry.resourceType === ResourceType.BITMAP) {\n        this.bitmapDirectoryEntry = directoryEntry;\n        this.bitmapDirectoryEntry.subdirectoryOffset -= 0x80000000;\n        return;\n      }\n    }\n\n    throw new Error(\"Missing bitmap resource directory\");\n  }\n\n  readBitmapTable() {\n    this.seek(this.rootAddress + this.bitmapDirectoryEntry.subdirectoryOffset);\n\n    let directoryEntryCount = this.readDirectoryEntryCount();\n    let bitmapEntries = new Array();\n    for (let i = 0; i < directoryEntryCount; ++i) {\n      let entry = this.readResourceDirectoryEntry();\n      if (entry.subdirectoryOffset > 0x80000000) {\n        entry.subdirectoryOffset -= 0x80000000;\n        bitmapEntries.push(entry);\n      }\n    }\n\n    for (let entry of bitmapEntries) {\n      this.seek(this.rootAddress + entry.subdirectoryOffset + 20);\n      let entrySubdirectoryOffset = this.readUint32();\n\n      this.seek(this.rootAddress + entrySubdirectoryOffset);\n      let dataEntry = this.readResourceDataEntry();\n      let start = dataEntry.offset - this.virtualAddress + this.rootAddress;\n      let size = dataEntry.size;\n\n      this.seek(start);\n\n      let headerSize = this.readUint32();\n      let width;\n      let height;\n\n      if (headerSize === 12) {\n        // BITMAPCOREHEADER: width and height are unsigned 16-bit values\n        // See: https://learn.microsoft.com/windows/win32/api/wingdi/ns-wingdi-bitmapcoreheader\n        width = this.readUint16();\n        height = this.readUint16();\n      } else {\n        width = Math.abs(this.readInt32());\n        height = Math.abs(this.readInt32());\n      }\n\n      this.resourceInfo.set(\n        entry.resourceType,\n        new ResourceInfo(start, size, width, height)\n      );\n    }\n  }\n\n  getResourceIDs() {\n    return this.resourceInfo.keys();\n  }\n\n  getResourceInfo(resourceID) {\n    let info = this.resourceInfo.get(resourceID);\n    if (!info) {\n      info = null;\n    }\n    return info;\n  }\n\n  readResource(info) {\n    return this.file.slice(info.start, info.start + info.size);\n  }\n}\n","import { LoadType } from \"./load-type\";\nimport { DIBReader } from \"./dib-reader\";\nimport { PEReader } from \"./pe-reader\";\n\nself.egfs = new Map();\n\nself.loadDIB = function (data) {\n  try {\n    let egf = egfs.get(data.fileID);\n    if (egf) {\n      let info = egf.getResourceInfo(data.resourceID);\n      if (info) {\n        let dib = egf.readResource(info);\n        let reader = new DIBReader(dib);\n        let pixels = reader.read();\n        postMessage(\n          {\n            loadType: LoadType.DIB,\n            fileID: data.fileID,\n            resourceID: data.resourceID,\n            pixels: pixels.buffer,\n          },\n          [pixels.buffer]\n        );\n      }\n    }\n  } catch (e) {\n    postMessage({\n      loadType: LoadType.DIB,\n      fileID: data.fileID,\n      resourceID: data.resourceID,\n      error: e,\n    });\n  }\n};\n\nself.loadEGF = function (data) {\n  try {\n    if (egfs.has(data.fileID)) {\n      throw new Error(`EGF ${data.fileID} was already loaded.`);\n    }\n\n    let egf = new PEReader(data.buffer);\n\n    egfs.set(data.fileID, egf);\n\n    postMessage({\n      loadType: LoadType.EGF,\n      fileID: data.fileID,\n      resourceInfo: egf.resourceInfo,\n    });\n  } catch (e) {\n    postMessage({\n      loadType: LoadType.EGF,\n      fileID: data.fileID,\n      error: e,\n    });\n  }\n};\n\nonmessage = function (event) {\n  let data = event.data;\n\n  switch (data.loadType) {\n    case LoadType.DIB:\n      loadDIB(data);\n      break;\n    case LoadType.EGF:\n      loadEGF(data);\n      break;\n    default:\n      throw new Error(`Unhandled LoadType: ${data.loadType}`);\n  }\n};\n"],"names":["LoadType","trailingZeros","n","Math","clz32","createFaxCodeArray","array","result","i","length","push","FaxCode","sort","a","b","bitLength","constructor","code","runLength","this","WHITE_CODES","BLACK_CODES","LOOKUP_TABLE_3_BIT_TO_8_BIT","LOOKUP_TABLE_4_BIT_TO_8_BIT","LOOKUP_TABLE_5_BIT_TO_8_BIT","LOOKUP_TABLE_6_BIT_TO_8_BIT","HeaderType","Core","Core2","Info","V2","V3","V4","V5","Compression","RGB","RLE8","RLE4","Bitfields","Huffman1D","RLE24","JPEG","PNG","AlphaBitfields","CMYK","CMYKRLE8","CMYKRLE4","PaletteColor","g","r","Bitfield","shift","mask","maxLength","Error","read","data","redMask","greenMask","blueMask","alphaMask","fromMask","DIBReader","buffer","dataView","DataView","headerType","compression","readStrategy","bitFields","paletteColors","initialized","readUint8","position","getUint8","readUint16","getUint16","readUint32","getUint32","readInt32","getInt32","headerSize","width","height","planes","depth","colorsUsed","optionalBitMasksSize","paletteColorCount","paletteSize","bytesPerColor","stride","hasBitMasks","colorFromPalette","index","initialize","validateHeader","byteLength","Object","values","includes","validateHeaderTypeDepth","validateHeaderTypeCompression","validateCompressionDepth","allowedDepths","allowedCompressions","determineHeaderType","detectCoreHeader2WithSizeHeuristic","detectCoreHeader2WithCompressionTypeHeuristic","size","determineCompression","determineReadStrategy","RLEReadStrategy","HuffmanReadStrategy","PalettedReadStrategy","RGBReadStrategy","decodeBitfields","indexPalette","Array","pos","outputSize","abs","imageData","Uint8ClampedArray","ReadStrategy","reader","_outBuffer","getAlpha","LineByLineReadStrategy","outBuffer","rowCount","isTopDown","row","line","outPos","linePos","readLine","_outPos","_linePos","super","bytesPerPixel","p","readUint32WithZeroPadding","bytes","Uint8Array","pixelsPerByte","bytesPerLine","ceil","getPaletteIndices","createGetPaletteIndicesFunction","byte","indices","written","readUint8WithZeroPadding","paletteIndices","paletteIndex","color","setPixelGenerator","createSetPixelGeneratorFunction","dataPos","x","y","setPixel","init","peekInstruction","validatePosition","offsetCursor","nextLine","executeInstruction","instruction","readAbsoluteMode","generator","next","readEncodedMode","dataLength","controlByte","e","RunType","RunResult","firstCode","currentCode","bitsRemaining","readCode","faxCodes","faxCode","readRun","runType","ResourceType","ResourceDirectoryEntry","resourceType","subdirectoryOffset","ResourceDataEntry","offset","codePage","unused","ResourceInfo","start","PEReader","file","virtualAddress","rootAddress","bitmapDirectoryEntry","resourceInfo","Map","readHeader","readBitmapTable","seek","skip","readString","TextDecoder","decode","slice","readDirectoryEntryCount","readResourceDirectoryEntry","readResourceDataEntry","peHeaderAddress","sections","directoryEntryCount","directoryEntry","bitmapEntries","entry","entrySubdirectoryOffset","dataEntry","set","getResourceIDs","keys","getResourceInfo","resourceID","info","get","readResource","self","egfs","loadDIB","egf","fileID","dib","pixels","postMessage","loadType","error","loadEGF","has","onmessage","event"],"sourceRoot":""}