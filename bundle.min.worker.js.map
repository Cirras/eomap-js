{"version":3,"file":"bundle.min.worker.js","mappings":"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","sources":["webpack://eomap-js/./src/core/gfx/load/load-type.js","webpack://eomap-js/./src/core/gfx/load/dib-reader.js","webpack://eomap-js/./src/core/gfx/load/pe-reader.js","webpack://eomap-js/./src/core/gfx/load/gfx-loader.worker.js"],"sourcesContent":["export const LoadType = {\n  EGF: 1,\n  DIB: 2,\n};\n","const NUM_CONVERT_TABLES = 8;\nconst CONVERT_TABLES = (function () {\n  let tables = new Array(NUM_CONVERT_TABLES);\n  for (let i = 0; i < NUM_CONVERT_TABLES; ++i) {\n    let entries = 1 << (i + 1);\n    let table = new Array(entries);\n    for (let ii = 0; ii < entries; ++ii) {\n      table[ii] = Math.trunc((ii * 255) / (entries - 1));\n    }\n    tables[i] = table;\n  }\n  return tables;\n})();\n\nconst Compression = {\n  RGB: 0,\n  RLE8: 1,\n  RLE4: 2,\n  BitFields: 3,\n  JPEG: 4,\n  PNG: 5,\n};\n\nclass RGBQuad {\n  constructor(b, g, r, quad) {\n    this.b = b;\n    this.g = g;\n    this.r = r;\n    this.quad = quad;\n  }\n}\n\nfunction trailingZeros(n) {\n  n |= 0;\n  return n ? 31 - Math.clz32(n & -n) : 0;\n}\n\nclass BitField {\n  constructor(mask) {\n    if (mask === 0) {\n      this.shift = 0;\n      this.mask = 0;\n      this.length = 0;\n    }\n\n    this.shift = trailingZeros(mask);\n    this.mask = mask >> this.shift;\n    this.length = trailingZeros(~this.mask);\n  }\n\n  read(data) {\n    data = (data >> this.shift) & this.mask;\n    return CONVERT_TABLES[this.length - 1][data];\n  }\n}\n\nclass BitFields {\n  constructor(redMask, greenMask, blueMask, alphaMask) {\n    this.r = new BitField(redMask);\n    this.g = new BitField(greenMask);\n    this.b = new BitField(blueMask);\n    this.a = new BitField(alphaMask);\n  }\n}\n\nexport class DIBReader {\n  constructor(buffer) {\n    this.data = buffer;\n    this.dataView = new DataView(buffer);\n\n    this.bitFields = null;\n    this.paletteColors = null;\n\n    this.initialized = false;\n  }\n\n  readUint8(position) {\n    return this.dataView.getUint8(position);\n  }\n\n  readUint16(position) {\n    return this.dataView.getUint16(position, true);\n  }\n\n  readUint32(position) {\n    return this.dataView.getUint32(position, true);\n  }\n\n  readUInt32WithZeroPadding(position) {\n    if (position + 4 < this.dataView.byteLength) {\n      return this.dataView.getUint32(position, true);\n    }\n\n    let bytes = new Uint8Array([0, 0, 0, 0]);\n\n    for (let i = 0; i < bytes.length; ++i) {\n      if (position >= this.dataView.byteLength) {\n        break;\n      }\n      bytes[i] = this.readUint8(position++);\n    }\n\n    return new DataView(bytes.buffer).getUint32(0, true);\n  }\n\n  get headerSize() {\n    return this.readUint32(0);\n  }\n\n  get width() {\n    return this.readUint32(4);\n  }\n\n  get height() {\n    return this.readUint32(8);\n  }\n\n  get colorPlanes() {\n    return 1;\n  }\n\n  get depth() {\n    return this.readUint16(14);\n  }\n\n  get compression() {\n    return this.readUint32(16);\n  }\n\n  get imageSize() {\n    return this.readUint32(20);\n  }\n\n  get paletteColorCount() {\n    if (this.depth < 16) {\n      let colorsUsed = this.readUint32(32);\n      let numColors = colorsUsed;\n      if (numColors === 0) {\n        numColors = 1 << this.depth;\n      }\n      return numColors;\n    }\n\n    return 0;\n  }\n\n  get paletteSize() {\n    let numColors = this.paletteColorCount;\n\n    if (numColors > 0) {\n      return numColors * 4;\n    }\n\n    if (this.headerSize === 40 && this.compression == Compression.BitFields) {\n      // The Windows NT variant of the Windows 3.x BMP format can store 16-bit and 32-bit\n      // data in a BMP file.\n      // If the bitmap contains 16 or 32 bits per pixel, then only BitFields Compression is\n      // supported and the redMask, greenMask, and blueMask fields will be present following\n      // the header in place of a color palette.\n      // Otherwise, the file is identical to a Windows 3.x BMP file.\n      // See: https://www.fileformat.info/format/bmp/egff.htm\n      return 12;\n    }\n\n    return 0;\n  }\n\n  get bpp() {\n    return this.depth >> 3;\n  }\n\n  get stride() {\n    return ((this.width * this.depth + 31) & ~31) >> 3;\n  }\n\n  get redMask() {\n    return this.readUint32(40);\n  }\n\n  get greenMask() {\n    return this.readUint32(44);\n  }\n\n  get blueMask() {\n    return this.readUint32(48);\n  }\n\n  get alphaMask() {\n    return this.headerSize >= 56 ? this.readUint32(52) : 0;\n  }\n\n  colorFromPalette(index) {\n    this.initialize();\n\n    if (index >= this.paletteColors.length) {\n      return this.colorFromPalette(0);\n    }\n\n    return this.paletteColors[index];\n  }\n\n  checkFormat() {\n    if (this.width < 0) {\n      throw new Error(\"Image width less than zero\");\n    }\n\n    if (\n      this.width > 0x40000000 ||\n      this.height < -0x40000000 ||\n      this.height > 0x40000000\n    ) {\n      throw new Error(\"Image dimensions out of bounds\");\n    }\n\n    if (\n      this.depth !== 8 &&\n      this.depth !== 16 &&\n      this.depth !== 24 &&\n      this.depth !== 32\n    ) {\n      throw new Error(\"Unsupported bit depth\");\n    }\n\n    if (\n      this.compression !== Compression.RGB &&\n      this.compression !== Compression.BitFields\n    ) {\n      throw new Error(\"Unsupported compression\");\n    }\n\n    if (this.bitFields) {\n      let maxmask = (1 << NUM_CONVERT_TABLES) - 1;\n      if (\n        this.bitFields.r.mask > maxmask ||\n        this.bitFields.g.mask > maxmask ||\n        this.bitFields.b.mask > maxmask ||\n        this.bitFields.a.mask > maxmask\n      ) {\n        throw new Error(\"Bit mask too long\");\n      }\n    }\n  }\n\n  decodeBitFields() {\n    if (this.compression === Compression.BitFields) {\n      this.bitFields = new BitFields(\n        this.redMask,\n        this.greenMask,\n        this.blueMask,\n        this.alphaMask\n      );\n    } else {\n      switch (this.depth) {\n        case 16:\n          this.bitFields = new BitFields(\n            0x00007c00,\n            0x000003e0,\n            0x0000001f,\n            0x00000000\n          );\n          break;\n\n        case 24:\n        case 32:\n          this.bitFields = new BitFields(\n            0x00ff0000,\n            0x0000ff00,\n            0x000000ff,\n            0x00000000\n          );\n          break;\n      }\n    }\n  }\n\n  indexPalette() {\n    if (this.compression === Compression.BitFields) {\n      return;\n    }\n\n    this.paletteColors = new Array(this.paletteColorCount);\n    let pos = this.headerSize;\n\n    for (let i = 0; i < this.paletteColors.length; ++i) {\n      this.paletteColors[i] = new RGBQuad(\n        this.readUint8(pos++),\n        this.readUint8(pos++),\n        this.readUint8(pos++),\n        this.readUint8(pos++)\n      );\n    }\n  }\n\n  initialize() {\n    if (this.initialized) {\n      return;\n    }\n\n    this.decodeBitFields();\n    this.indexPalette();\n    this.checkFormat();\n\n    this.initialized = true;\n  }\n\n  readLine(outBuf, row) {\n    const isBottomUp = this.height < 0;\n    let line = isBottomUp ? row : this.height - 1 - row;\n    let pos = this.headerSize + this.paletteSize + this.stride * line;\n    let outPos = this.width * row * 4;\n\n    for (let i = 0; i < this.width; ++i) {\n      let b = 0;\n      let g = 0;\n      let r = 0;\n      let a = 0;\n\n      switch (this.depth) {\n        case 8:\n          let paletteIndex = this.readUint8(pos);\n          let color = this.colorFromPalette(paletteIndex);\n          b = color.b;\n          g = color.g;\n          r = color.r;\n          break;\n\n        case 16:\n        case 24:\n        case 32:\n          let p = this.readUInt32WithZeroPadding(pos);\n          r = this.bitFields.r.read(p);\n          g = this.bitFields.g.read(p);\n          b = this.bitFields.b.read(p);\n          break;\n\n        default:\n          throw Error(`Unhandled bit depth: ${this.depth}`);\n      }\n\n      if (r !== 0 || g !== 0 || b !== 0) {\n        a = 0xff;\n      }\n\n      outBuf[outPos++] = r;\n      outBuf[outPos++] = g;\n      outBuf[outPos++] = b;\n      outBuf[outPos++] = a;\n\n      pos += this.bpp;\n    }\n  }\n\n  read() {\n    this.initialize();\n\n    const rowCount = Math.abs(this.height);\n    let imageData = new Uint8ClampedArray(this.width * rowCount * 4);\n\n    for (let row = 0; row < rowCount; ++row) {\n      this.readLine(imageData, row);\n    }\n\n    return imageData;\n  }\n}\n","const ResourceType = {\n  CURSOR: 1,\n  BITMAP: 2,\n  ICON: 3,\n  MENU: 4,\n  DIALOG: 5,\n  STRING_TABLE: 6,\n  FONT_DIRECTORY: 7,\n  FONT: 8,\n  ACCELERATOR: 9,\n  UNFORMATTED: 10,\n  MESSAGE_TABLE: 11,\n  GROUP_CURSOR: 12,\n  GROUP_ICON: 14,\n  VERSION_INFORMATION: 16,\n};\n\nclass ResourceDirectoryEntry {\n  constructor(resourceType, subdirectoryOffset) {\n    this.resourceType = resourceType;\n    this.subdirectoryOffset = subdirectoryOffset;\n  }\n}\n\nclass ResourceDataEntry {\n  constructor(offset, size, codePage, unused) {\n    this.offset = offset;\n    this.size = size;\n    this.codePage = codePage;\n    this.unused = unused;\n  }\n}\n\nclass ResourceInfo {\n  constructor(start, size, width, height) {\n    this.start = start;\n    this.size = size;\n    this.width = width;\n    this.height = height;\n  }\n}\n\nexport class PEReader {\n  constructor(buffer) {\n    this.file = buffer;\n    this.dataView = new DataView(buffer);\n    this.position = 0;\n    this.virtualAddress = 0;\n    this.rootAddress = 0;\n\n    this.bitmapDirectoryEntry = new ResourceDirectoryEntry();\n    this.resourceInfo = new Map();\n\n    this.readHeader();\n    this.readBitmapTable();\n  }\n\n  seek(position) {\n    this.position = position;\n  }\n\n  skip(offset) {\n    this.position += offset;\n  }\n\n  readShort() {\n    let result = this.dataView.getUint16(this.position, true);\n    this.position += 2;\n    return result;\n  }\n\n  readInt() {\n    let result = this.dataView.getUint32(this.position, true);\n    this.position += 4;\n    return result;\n  }\n\n  readString(length) {\n    let decoder = new TextDecoder(\"utf-8\");\n    let result = decoder.decode(\n      new Uint8Array(this.file.slice(this.position, this.position + length))\n    );\n    this.position += length;\n    return result;\n  }\n\n  readDirectoryEntryCount() {\n    this.skip(0x0c);\n    let namedEntries = this.readShort();\n    let idEntries = this.readShort();\n    return namedEntries + idEntries;\n  }\n\n  readResourceDirectoryEntry() {\n    let resourceType = this.readInt();\n    let subdirectoryOffset = this.readInt();\n    return new ResourceDirectoryEntry(resourceType, subdirectoryOffset);\n  }\n\n  readResourceDataEntry() {\n    let offset = this.readInt();\n    let size = this.readInt();\n    let codePage = this.readInt();\n    let unused = this.readInt();\n    return new ResourceDataEntry(offset, size, codePage, unused);\n  }\n\n  readHeader() {\n    this.seek(0x3c);\n    let peHeaderAddress = this.readShort();\n\n    this.skip(peHeaderAddress - 0x3c - 0x02);\n    let type = this.readString(4);\n    if (type !== \"PE\\0\\0\") {\n      throw new Error(\"Invalid PE file signature\");\n    }\n\n    this.skip(0x02);\n    let sections = this.readShort();\n\n    this.skip(0x78 - 0x04 + 0x0c);\n    this.virtualAddress = this.readInt();\n\n    this.skip(0x6c + 0x08 + 0x04);\n\n    for (let i = 0; i < sections; ++i) {\n      let checkVirtualAddress = this.readInt();\n      if (checkVirtualAddress == this.virtualAddress) {\n        this.skip(0x04);\n        this.rootAddress = this.readInt();\n        break;\n      }\n      this.skip(0x24);\n    }\n\n    if (this.rootAddress == 0) {\n      throw new Error(\"Invalid root address\");\n    }\n\n    this.seek(this.rootAddress);\n    let directoryEntryCount = this.readDirectoryEntryCount();\n\n    for (let i = 0; i < directoryEntryCount; ++i) {\n      let directoryEntry = this.readResourceDirectoryEntry();\n      if (directoryEntry.resourceType === ResourceType.BITMAP) {\n        this.bitmapDirectoryEntry = directoryEntry;\n        this.bitmapDirectoryEntry.subdirectoryOffset -= 0x80000000;\n        return;\n      }\n    }\n\n    throw new Error(\"Missing bitmap resource directory\");\n  }\n\n  readBitmapTable() {\n    this.seek(this.rootAddress + this.bitmapDirectoryEntry.subdirectoryOffset);\n\n    let directoryEntryCount = this.readDirectoryEntryCount();\n    let bitmapEntries = new Array();\n    for (let i = 0; i < directoryEntryCount; ++i) {\n      let entry = this.readResourceDirectoryEntry();\n      if (entry.subdirectoryOffset > 0x80000000) {\n        entry.subdirectoryOffset -= 0x80000000;\n        bitmapEntries.push(entry);\n      }\n    }\n\n    for (let entry of bitmapEntries) {\n      this.seek(this.rootAddress + entry.subdirectoryOffset + 20);\n      let entrySubdirectoryOffset = this.readInt();\n\n      this.seek(this.rootAddress + entrySubdirectoryOffset);\n      let dataEntry = this.readResourceDataEntry();\n      let start = dataEntry.offset - this.virtualAddress + this.rootAddress;\n      let size = dataEntry.size;\n\n      this.seek(start + 4);\n      let width = this.readInt();\n      let height = this.readInt();\n\n      this.resourceInfo.set(\n        entry.resourceType,\n        new ResourceInfo(start, size, width, height)\n      );\n    }\n  }\n\n  getResourceIDs() {\n    return this.resourceInfo.keys();\n  }\n\n  getResourceInfo(resourceID) {\n    let info = this.resourceInfo.get(resourceID);\n    if (!info) {\n      info = null;\n    }\n    return info;\n  }\n\n  readResource(info) {\n    return this.file.slice(info.start, info.start + info.size);\n  }\n}\n","import { LoadType } from \"./load-type\";\nimport { DIBReader } from \"./dib-reader\";\nimport { PEReader } from \"./pe-reader\";\n\nself.egfs = new Map();\n\nself.loadDIB = function (data) {\n  try {\n    let egf = egfs.get(data.fileID);\n    if (egf) {\n      let info = egf.getResourceInfo(data.resourceID);\n      if (info) {\n        let dib = egf.readResource(info);\n        let reader = new DIBReader(dib);\n        let pixels = reader.read();\n        postMessage(\n          {\n            loadType: LoadType.DIB,\n            fileID: data.fileID,\n            resourceID: data.resourceID,\n            pixels: pixels.buffer,\n          },\n          [pixels.buffer]\n        );\n      }\n    }\n  } catch (e) {\n    postMessage({\n      loadType: LoadType.DIB,\n      fileID: data.fileID,\n      resourceID: data.resourceID,\n      error: e,\n    });\n  }\n};\n\nself.loadEGF = function (data) {\n  try {\n    if (egfs.has(data.fileID)) {\n      throw new Error(`EGF ${data.fileID} was already loaded.`);\n    }\n\n    let egf = new PEReader(data.buffer);\n\n    egfs.set(data.fileID, egf);\n\n    postMessage({\n      loadType: LoadType.EGF,\n      fileID: data.fileID,\n      resourceInfo: egf.resourceInfo,\n    });\n  } catch (e) {\n    postMessage({\n      loadType: LoadType.EGF,\n      fileID: data.fileID,\n      error: e,\n    });\n  }\n};\n\nonmessage = function (event) {\n  let data = event.data;\n\n  switch (data.loadType) {\n    case LoadType.DIB:\n      loadDIB(data);\n      break;\n    case LoadType.EGF:\n      loadEGF(data);\n      break;\n    default:\n      throw new Error(`Unhandled LoadType: ${data.loadType}`);\n  }\n};\n"],"names":["LoadType","CONVERT_TABLES","tables","Array","i","entries","table","ii","Math","trunc","Compression","RGBQuad","constructor","b","g","r","quad","this","trailingZeros","n","clz32","BitField","mask","shift","length","read","data","BitFields","redMask","greenMask","blueMask","alphaMask","a","DIBReader","buffer","dataView","DataView","bitFields","paletteColors","initialized","readUint8","position","getUint8","readUint16","getUint16","readUint32","getUint32","readUInt32WithZeroPadding","byteLength","bytes","Uint8Array","headerSize","width","height","colorPlanes","depth","compression","imageSize","paletteColorCount","numColors","paletteSize","bpp","stride","colorFromPalette","index","initialize","checkFormat","Error","maxmask","decodeBitFields","indexPalette","pos","readLine","outBuf","row","line","outPos","paletteIndex","color","p","rowCount","abs","imageData","Uint8ClampedArray","ResourceType","ResourceDirectoryEntry","resourceType","subdirectoryOffset","ResourceDataEntry","offset","size","codePage","unused","ResourceInfo","start","PEReader","file","virtualAddress","rootAddress","bitmapDirectoryEntry","resourceInfo","Map","readHeader","readBitmapTable","seek","skip","readShort","result","readInt","readString","TextDecoder","decode","slice","readDirectoryEntryCount","readResourceDirectoryEntry","readResourceDataEntry","peHeaderAddress","sections","directoryEntryCount","directoryEntry","bitmapEntries","entry","push","entrySubdirectoryOffset","dataEntry","set","getResourceIDs","keys","getResourceInfo","resourceID","info","get","readResource","self","egfs","loadDIB","egf","fileID","dib","pixels","postMessage","loadType","e","error","loadEGF","has","onmessage","event"],"sourceRoot":""}