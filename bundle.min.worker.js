(()=>{"use strict";const e=1,t=2;function i(e){return(e|=0)?31-Math.clz32(e&-e):0}function s(e){let t=[];for(let i=0;i<e.length;i+=3)t.push(new r(e[i],e[i+1],e[i+2]));return t.sort(((e,t)=>e.bitLength-t.bitLength)),t}class r{constructor(e,t,i){this.bitLength=e,this.code=t,this.runLength=i}}r.WHITE_CODES=s([8,53,0,6,7,1,4,7,2,4,8,3,4,11,4,4,12,5,4,14,6,4,15,7,5,19,8,5,20,9,5,7,10,5,8,11,6,8,12,6,3,13,6,52,14,6,53,15,6,42,16,6,43,17,7,39,18,7,12,19,7,8,20,7,23,21,7,3,22,7,4,23,7,40,24,7,43,25,7,19,26,7,36,27,7,24,28,8,2,29,8,3,30,8,26,31,8,27,32,8,18,33,8,19,34,8,20,35,8,21,36,8,22,37,8,23,38,8,40,39,8,41,40,8,42,41,8,43,42,8,44,43,8,45,44,8,4,45,8,5,46,8,10,47,8,11,48,8,82,49,8,83,50,8,84,51,8,85,52,8,36,53,8,37,54,8,88,55,8,89,56,8,90,57,8,91,58,8,74,59,8,75,60,8,50,61,8,51,62,8,52,63,5,27,64,5,18,128,6,23,192,7,55,256,8,54,320,8,55,384,8,100,448,8,101,512,8,104,576,8,103,640,9,204,704,9,205,768,9,210,832,9,211,896,9,212,960,9,213,1024,9,214,1088,9,215,1152,9,216,1216,9,217,1280,9,218,1344,9,219,1408,9,152,1472,9,153,1536,9,154,1600,6,24,1664,9,155,1728,11,8,1792,11,12,1856,11,13,1920,12,18,1984,12,19,2048,12,20,2112,12,21,2176,12,22,2240,12,23,2304,12,28,2368,12,29,2432,12,30,2496,12,31,2560,12,1,-1]),r.BLACK_CODES=s([10,55,0,3,2,1,2,3,2,2,2,3,3,3,4,4,3,5,4,2,6,5,3,7,6,5,8,6,4,9,7,4,10,7,5,11,7,7,12,8,4,13,8,7,14,9,24,15,10,23,16,10,24,17,10,8,18,11,103,19,11,104,20,11,108,21,11,55,22,11,40,23,11,23,24,11,24,25,12,202,26,12,203,27,12,204,28,12,205,29,12,104,30,12,105,31,12,106,32,12,107,33,12,210,34,12,211,35,12,212,36,12,213,37,12,214,38,12,215,39,12,108,40,12,109,41,12,218,42,12,219,43,12,84,44,12,85,45,12,86,46,12,87,47,12,100,48,12,101,49,12,82,50,12,83,51,12,36,52,12,55,53,12,56,54,12,39,55,12,40,56,12,88,57,12,89,58,12,43,59,12,44,60,12,90,61,12,102,62,12,103,63,10,15,64,12,200,128,12,201,192,12,91,256,12,51,320,12,52,384,12,53,448,13,108,512,13,109,576,13,74,640,13,75,704,13,76,768,13,77,832,13,114,896,13,115,960,13,116,1024,13,117,1088,13,118,1152,13,119,1216,13,82,1280,13,83,1344,13,84,1408,13,85,1472,13,90,1536,13,91,1600,13,100,1664,13,101,1728,11,8,1792,11,12,1856,11,13,1920,12,18,1984,12,19,2048,12,20,2112,12,21,2176,12,22,2240,12,23,2304,12,28,2368,12,29,2432,12,30,2496,12,31,2560,12,1,-1]);const a=[0,36,73,109,146,182,219,255],h=[0,17,34,51,68,85,102,119,136,153,170,187,204,221,238,255],n=[0,8,16,25,33,41,49,58,66,74,82,90,99,107,115,123,132,140,148,156,165,173,181,189,197,206,214,222,230,239,247,255],o=[0,4,8,12,16,20,24,28,32,36,40,45,49,53,57,61,65,69,73,77,81,85,89,93,97,101,105,109,113,117,121,125,130,134,138,142,146,150,154,158,162,166,170,174,178,182,186,190,194,198,202,206,210,215,219,223,227,231,235,239,243,247,251,255],d={Core:"BITMAPCOREHEADER",Core2:"BITMAPCOREHEADER2",Info:"BITMAPINFOHEADER",V2:"BITMAPV2INFOHEADER",V3:"BITMAPV3INFOHEADER",V4:"BITMAPV4HEADER",V5:"BITMAPV5HEADER"},c={RGB:"BI_RGB",RLE8:"BI_RLE8",RLE4:"BI_RLE4",Bitfields:"BI_BITFIELDS",Huffman1D:"BI_HUFFMAN1D",RLE24:"BI_RLE24",JPEG:"BI_JPEG",PNG:"BI_PNG",AlphaBitfields:"BI_ALPHABITFIELDS",CMYK:"BI_CMYK",CMYKRLE8:"BI_CMYKRLE8",CMYKRLE4:"BI_CMYKRLE4"};class l{constructor(e,t,i){this.b=e,this.g=t,this.r=i}}class u{constructor(e,t){this.length=e,this.shift=t}static fromMask(e,t){if(0===e)return new u(0,0);let s=i(e),r=i(~(e>>>s));if(r!==(a=e,16843009*((a=(858993459&(a-=a>>1&1431655765))+(a>>2&858993459))+(a>>4)&252645135)>>24))throw new Error("Non-contiguous bitfield mask");var a;if(r+s>t)throw new Error("Bitfield mask too long");return r>8&&(s+=r-8,r=8),new u(r,s)}read(e){switch(e>>=this.shift,this.length){case 0:return 0;case 1:return 255*(1&e);case 2:return 85*(3&e);case 3:return a[7&e];case 4:return h[15&e];case 5:return n[31&e];case 6:return o[63&e];case 7:return(127&e)<<1|(127&e)>>6;case 8:return 255&e;default:throw new Error("Unhandled bitfield mask length ".concat(this.length))}}}class p{constructor(e,t,i,s){this.r=e,this.g=t,this.b=i,this.a=s}static fromMask(e,t,i,s,r){return new p(u.fromMask(e,r),u.fromMask(t,r),u.fromMask(i,r),u.fromMask(s,r))}}class f{constructor(e){this.data=e,this.dataView=new DataView(e),this.headerType=null,this.compression=null,this.readStrategy=null,this.bitFields=null,this.paletteColors=null,this.initialized=!1}readUint8(e){return this.dataView.getUint8(e)}readUint16(e){return this.dataView.getUint16(e,!0)}readUint32(e){return this.dataView.getUint32(e,!0)}readInt32(e){return this.dataView.getInt32(e,!0)}get headerSize(){return this.readUint32(0)}get width(){return this.headerType===d.Core?this.readUint16(4):this.readInt32(4)}get height(){return this.headerType===d.Core?this.readUint16(6):this.readInt32(8)}get planes(){return this.headerType===d.Core?this.readUint16(8):this.readUint16(12)}get depth(){return this.headerType===d.Core?this.readUint16(10):this.readUint16(14)}get colorsUsed(){return this.headerSize<36?0:this.readUint32(32)}get optionalBitMasksSize(){if(this.headerType===d.Info)switch(this.compression){case c.Bitfields:return 12;case c.AlphaBitfields:return 16}return 0}get paletteColorCount(){return this.colorsUsed?this.colorsUsed:this.depth<=8?1<<this.depth:0}get paletteSize(){const e=this.headerType===d.Core?3:4;return this.paletteColorCount*e}get stride(){return(this.width*this.depth+31&-32)>>3}get hasBitMasks(){switch(this.headerType){case d.Core:case d.Core2:return!1;case d.Info:return this.compression===c.Bitfields||this.compression===c.AlphaBitfields;default:return!0}}get redMask(){return this.hasBitMasks?this.readUint32(40):0}get greenMask(){return this.hasBitMasks?this.readUint32(44):0}get blueMask(){return this.hasBitMasks?this.readUint32(48):0}get alphaMask(){if(!this.hasBitMasks||this.headerType===d.V2)return 0;this.readUint32(52)}colorFromPalette(e){return this.initialize(),e>=this.paletteColors.length?new l(0,0,0):this.paletteColors[e]}validateHeader(){if(this.dataView.byteLength<4||this.dataView.byteLength<this.headerSize)throw new Error("Truncated header");if(!Object.values(d).includes(this.headerType))throw new Error("Unknown header type with size ".concat(this.headerSize));if(!Object.values(c).includes(this.compression))throw new Error("Unknown compression type");if(this.width<=0)throw new Error("Image width must be positive");if(0===this.height)throw new Error("Image height cannot be zero");if(this.height<0&&[d.Core,d.Core2].includes(this.headerType))throw new Error("Top-down bitmaps not supported for ".concat(this.headerType));if(this.width>1073741824||this.height<-1073741824||this.height>1073741824)throw new Error("Image dimensions out of bounds");if(1!==this.planes)throw new Error("Invalid number of color planes (".concat(this.planes,")"));switch(this.headerType){case d.Core:this.validateHeaderTypeDepth(1,2,4,8,24);break;case d.Core2:this.validateHeaderTypeDepth(1,2,4,8,24),this.validateHeaderTypeCompression(c.RGB,c.RLE8,c.RLE4,c.Huffman1D,c.RLE24);break;default:this.validateHeaderTypeDepth(1,2,4,8,16,24,32),this.validateHeaderTypeCompression(c.RGB,c.RLE8,c.RLE4,c.Bitfields,c.JPEG,c.PNG,c.AlphaBitfields)}switch(this.compression){case c.RGB:this.validateCompressionDepth(1,2,4,8,16,24,32);break;case c.RLE8:this.validateCompressionDepth(8);break;case c.RLE4:this.validateCompressionDepth(4);break;case c.Bitfields:case c.AlphaBitfields:this.validateCompressionDepth(16,32);break;case c.Huffman1D:this.validateCompressionDepth(1);break;case c.RLE24:this.validateCompressionDepth(24);break;default:throw new Error("Unsupported compression (".concat(this.compression,")"))}if(this.colorsUsed>1<<this.depth)throw new Error("Palette size ".concat(this.paletteColorCount," exceeds maximum value for ").concat(this.depth,"-bit image"))}validateHeaderTypeDepth(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];if(!t.includes(this.depth))throw new Error("Invalid bit depth for ".concat(this.headerType," (").concat(this.depth,")"))}validateHeaderTypeCompression(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];if(!t.includes(this.compression))throw new Error("Invalid compression for ".concat(this.headerType," (").concat(this.compression,")"))}validateCompressionDepth(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];if(!t.includes(this.depth))throw new Error("Invalid bit depth for ".concat(this.compression," (").concat(this.depth,")"))}determineHeaderType(){if(this.dataView.byteLength<4)return;switch(this.headerSize){case 12:this.headerType=d.Core;break;case 40:this.headerType=d.Info;break;case 52:this.headerType=d.V2;break;case 56:this.headerType=d.V3;break;case 108:this.headerType=d.V4;break;case 124:this.headerType=d.V5;break;default:this.detectCoreHeader2WithSizeHeuristic()&&(this.headerType=d.Core2)}this.detectCoreHeader2WithCompressionTypeHeuristic()&&(this.headerType=d.Core2)}detectCoreHeader2WithSizeHeuristic(){const e=this.headerSize;return e>=16&&e<=64&&(e%4==0||42===e||46===e)}detectCoreHeader2WithCompressionTypeHeuristic(){if(this.headerSize>=20&&this.dataView.byteLength>=20){const e=this.readUint32(16);if(3===e&&1===this.depth)return!0;if(4===e&&24===this.depth)return!0}return!1}determineCompression(){if(this.headerSize<20)this.compression=c.RGB;else if(this.dataView.byteLength<20)this.compression=null;else switch(this.readUint32(16)){case 0:this.compression=c.RGB;break;case 1:this.compression=c.RLE8;break;case 2:this.compression=c.RLE4;break;case 3:this.compression=this.headerType===d.Core2?c.Huffman1D:c.Bitfields;break;case 4:this.compression=this.headerType===d.Core2?c.RLE24:c.JPEG;break;case 5:this.compression=c.PNG;break;case 6:this.compression=c.AlphaBitfields;break;case 11:this.compression=c.CMYK;break;case 12:this.compression=c.CMYKRLE8;break;case 13:this.compression=c.CMYKRLE4;break;default:this.compression=null}}determineReadStrategy(){switch(this.compression){case c.RLE4:case c.RLE8:case c.RLE24:return void(this.readStrategy=new m(this));case c.Huffman1D:return void(this.readStrategy=new L(this))}switch(this.depth){case 1:case 2:case 4:case 8:this.readStrategy=new b(this);break;case 16:case 24:case 32:this.readStrategy=new y(this);break;default:throw Error("Unhandled bit depth: ".concat(this.depth))}}decodeBitfields(){if([c.Bitfields,c.AlphaBitfields].includes(this.compression))this.bitFields=p.fromMask(this.redMask,this.greenMask,this.blueMask,this.alphaMask,this.depth);else switch(this.depth){case 16:this.bitFields=p.fromMask(31744,992,31,0,this.depth);break;case 24:case 32:this.bitFields=p.fromMask(16711680,65280,255,0,this.depth)}}indexPalette(){if(this.depth>8)return;this.paletteColors=new Array(this.paletteColorCount);let e=this.headerSize+this.optionalBitMasksSize;for(let t=0;t<this.paletteColors.length;++t)this.paletteColors[t]=new l(this.readUint8(e++),this.readUint8(e++),this.readUint8(e++)),this.headerType!==d.Core&&e++}initialize(){this.initialized||(this.determineHeaderType(),this.determineCompression(),this.validateHeader(),this.determineReadStrategy(),this.decodeBitfields(),this.indexPalette(),this.initialized=!0)}read(){this.initialize();const e=this.width*Math.abs(this.height)*4,t=new Uint8ClampedArray(e);return this.readStrategy.read(t),t}}class w{constructor(e){this.reader=e,this.width=this.reader.width,this.height=this.reader.height}read(e){throw new Error("ReadStrategy.read() must be implemented")}getAlpha(e,t,i){return 0!==e||0!==t||0!==i?255:0}}class g extends w{read(e){const t=Math.abs(this.height),i=this.height<0;for(let s=0;s<t;++s){const t=i?s:this.height-1-s,r=this.width*s*4,a=this.reader.headerSize+this.reader.optionalBitMasksSize+this.reader.paletteSize+this.reader.stride*t;this.readLine(e,r,a)}}readLine(e,t,i){throw new Error("LineByLineReadStrategy.readLine() must be implemented")}}class y extends g{constructor(e){super(e),this.bytesPerPixel=this.reader.depth>>3}readLine(e,t,i){for(let s=0;s<this.width;++s){let s=0,r=0,a=0,h=this.readUint32WithZeroPadding(i);s=this.bitFields.r.read(h),r=this.bitFields.g.read(h),a=this.bitFields.b.read(h),e[t++]=s,e[t++]=r,e[t++]=a,e[t++]=this.getAlpha(s,r,a),i+=this.bytesPerPixel}}readUint32WithZeroPadding(e){if(e+4<=this.reader.dataView.byteLength)return this.reader.readUint32(e);let t=new Uint8Array([0,0,0,0]);for(let i=0;i<t.length&&!(e>=this.reader.dataView.byteLength);++i)t[i]=this.reader.readUint8(e++);return new DataView(t.buffer).getUint32(0,!0)}get bitFields(){return this.reader.bitFields}}class b extends g{constructor(e){super(e),this.pixelsPerByte=8/this.reader.depth,this.bytesPerLine=Math.ceil(this.width/this.pixelsPerByte),this.getPaletteIndices=b.createGetPaletteIndicesFunction(this.reader.depth)}static createGetPaletteIndicesFunction(e){switch(e){case 1:return e=>{let t=new Array(8);for(let i=0;i<8;++i)t[7-i]=(e&1<<i)>>i;return t};case 2:return e=>[(192&e)>>6,(48&e)>>4,(12&e)>>2,3&e];case 4:return e=>[(240&e)>>4,15&e];case 8:return e=>[e];default:throw Error("Unhandled bit depth: ".concat(e))}}readLine(e,t,i){let s=0;for(let r=0;r<this.bytesPerLine;++r){const r=this.readUint8WithZeroPadding(i),a=this.getPaletteIndices(r);for(let i of a){const r=this.reader.colorFromPalette(i),{b:a,g:h,r:n}=r;if(e[t++]=n,e[t++]=h,e[t++]=a,e[t++]=this.getAlpha(n,h,a),++s===this.width)return}++i}}readUint8WithZeroPadding(e){return e<this.reader.dataView.byteLength?this.reader.readUint8(e):0}}class m extends w{constructor(e){super(e),this.compression=e.compression,this.setPixelGenerator=m.createSetPixelGeneratorFunction(this.compression),this.dataPos=null,this.x=null,this.y=null}static createSetPixelGeneratorFunction(e){switch(e){case c.RLE8:return function*(e){let t=this.reader.colorFromPalette(this.readUint8());for(;;)this.setPixel(t.r,t.g,t.b,e),yield};case c.RLE4:return function*(e){const t=this.readUint8();let i=null,s=0;for(;;){switch(s++%2){case 0:i=this.reader.colorFromPalette((240&t)>>4);break;case 1:i=this.reader.colorFromPalette(15&t)}this.setPixel(i.r,i.g,i.b,e),yield}};case c.RLE24:return function*(e){const t=this.readUint8(),i=this.readUint8(),s=this.readUint8();for(;;)this.setPixel(s,i,t,e),yield}}}init(){this.dataPos=this.reader.headerSize+this.reader.optionalBitMasksSize+this.reader.paletteSize,this.x=0,this.y=0}peekInstruction(){return 0===this.reader.readUint8(this.dataPos)?this.reader.readUint8(this.dataPos+1):null}validatePosition(){if(this.x>=this.width||this.y>=Math.abs(this.height))throw new Error("Image output position out of bounds")}offsetCursor(e,t){this.x+=e,this.y+=t,1!==this.peekInstruction()&&this.validatePosition()}nextLine(){this.x=0,this.y++,1!==this.peekInstruction()&&this.validatePosition()}setPixel(e,t,i,s){const r=this.height<0?this.y:this.height-1-this.y,a=4*(this.width*r+this.x);s[a+0]=e,s[a+1]=t,s[a+2]=i,s[a+3]=this.getAlpha(e,t,i),this.x++}executeInstruction(e,t){switch(e){case 0:this.nextLine();break;case 1:return!1;case 2:this.offsetCursor(this.readUint8(),this.readUint8());break;default:const i=e;this.readAbsoluteMode(i,t)}return!0}readAbsoluteMode(e,t){let i=0,s=null;for(;i<e;){if(this.x===this.width)return!1;this.compression===c.RLE4&&i%2!=0||(s=this.setPixelGenerator(t)),s.next(),++i}this.dataPos+=1&this.dataPos}readEncodedMode(e,t){const i=this.setPixelGenerator(t);for(let t=0;t<e;++t){if(this.x===this.width){this.nextLine();break}i.next()}}read(e){for(this.init();this.dataPos<this.dataLength;){const t=this.readUint8();if(0===t){const t=this.readUint8();if(!this.executeInstruction(t,e))break}else{const i=t;this.readEncodedMode(i,e)}}return this.imageData}readUint8(){try{return this.reader.readUint8(this.dataPos++)}catch(e){throw new Error("Ran out of RLE data")}}get dataLength(){return this.reader.dataView.byteLength}}const E=0,k=1,C=0,I=1,U=2;class L extends w{constructor(e){super(e),this.dataPos=null,this.firstCode=null,this.currentCode=null,this.bitsRemaining=null,this.x=null}init(){this.dataPos=this.reader.headerSize+this.reader.paletteSize,this.firstCode=!0,this.currentCode=0,this.bitsRemaining=0}readCode(e){for(const t of e){for(;this.bitsRemaining<t.bitLength;){if(this.dataPos>=this.reader.dataView.byteLength)return null;this.currentCode<<=8,this.currentCode|=this.readUint8(),this.bitsRemaining+=8}if(t.code===this.currentCode>>>this.bitsRemaining-t.bitLength){this.bitsRemaining-=t.bitLength;const i=(1<<this.bitsRemaining)-1;return this.currentCode&=i,this.firstCode&&t.runLength<0?(this.firstCode=!1,this.readCode(e)):(this.firstCode=!1,t)}}return null}readRun(e,t){let i,s,a;switch(e){case E:i=255,s=r.WHITE_CODES;break;case k:i=0,s=r.BLACK_CODES;break;default:throw new Error("Unhandled RunType: ".concat(e))}for(;;){if(a=this.readCode(s),!a)return U;if(a.runLength>0){let e=4*(this.y*this.width+this.x);for(let s=0;s<a.runLength;++s)t[e++]=i,t[e++]=i,t[e++]=i,t[e++]=this.getAlpha(i,i,i),this.x++}if(a.runLength<64)break}return a.runLength<0?I:C}read(e){for(this.init(),this.y=this.height-1;this.y>=0;--this.y)for(this.x=0;;){{const t=this.readRun(E,e);if(t===I)break;if(t===U)return}{const t=this.readRun(k,e);if(t===I)break;if(t===U)return}}}readUint8(){return this.reader.readUint8(this.dataPos++)}}const R=2;class D{constructor(e,t){this.resourceType=e,this.subdirectoryOffset=t}}class P{constructor(e,t,i,s){this.offset=e,this.size=t,this.codePage=i,this.unused=s}}class T{constructor(e,t,i,s){this.start=e,this.size=t,this.width=i,this.height=s}}class B{constructor(e){this.file=e,this.dataView=new DataView(e),this.position=0,this.virtualAddress=0,this.rootAddress=0,this.bitmapDirectoryEntry=new D,this.resourceInfo=new Map,this.readHeader(),this.readBitmapTable()}seek(e){this.position=e}skip(e){this.position+=e}readUint16(){let e=this.dataView.getUint16(this.position,!0);return this.position+=2,e}readUint32(){let e=this.dataView.getUint32(this.position,!0);return this.position+=4,e}readInt32(){let e=this.dataView.getInt32(this.position,!0);return this.position+=4,e}readString(e){let t=new TextDecoder("utf-8").decode(new Uint8Array(this.file.slice(this.position,this.position+e)));return this.position+=e,t}readDirectoryEntryCount(){return this.skip(12),this.readUint16()+this.readUint16()}readResourceDirectoryEntry(){let e=this.readUint32(),t=this.readUint32();return new D(e,t)}readResourceDataEntry(){let e=this.readUint32(),t=this.readUint32(),i=this.readUint32(),s=this.readUint32();return new P(e,t,i,s)}readHeader(){this.seek(60);let e=this.readUint16();if(this.skip(e-60-2),"PE\0\0"!==this.readString(4))throw new Error("Invalid PE file signature");this.skip(2);let t=this.readUint16();this.skip(128),this.virtualAddress=this.readUint32(),this.skip(120);for(let e=0;e<t;++e){if(this.readUint32()==this.virtualAddress){this.skip(4),this.rootAddress=this.readUint32();break}this.skip(36)}if(0==this.rootAddress)throw new Error("Invalid root address");this.seek(this.rootAddress);let i=this.readDirectoryEntryCount();for(let e=0;e<i;++e){let e=this.readResourceDirectoryEntry();if(e.resourceType===R)return this.bitmapDirectoryEntry=e,void(this.bitmapDirectoryEntry.subdirectoryOffset-=2147483648)}throw new Error("Missing bitmap resource directory")}readBitmapTable(){this.seek(this.rootAddress+this.bitmapDirectoryEntry.subdirectoryOffset);let e=this.readDirectoryEntryCount(),t=new Array;for(let i=0;i<e;++i){let e=this.readResourceDirectoryEntry();e.subdirectoryOffset>2147483648&&(e.subdirectoryOffset-=2147483648,t.push(e))}for(let e of t){this.seek(this.rootAddress+e.subdirectoryOffset+20);let t=this.readUint32();this.seek(this.rootAddress+t);let i,s,r=this.readResourceDataEntry(),a=r.offset-this.virtualAddress+this.rootAddress,h=r.size;this.seek(a),12===this.readUint32()?(i=this.readUint16(),s=this.readUint16()):(i=Math.abs(this.readInt32()),s=Math.abs(this.readInt32())),this.resourceInfo.set(e.resourceType,new T(a,h,i,s))}}getResourceIDs(){return this.resourceInfo.keys()}getResourceInfo(e){let t=this.resourceInfo.get(e);return t||(t=null),t}readResource(e){return this.file.slice(e.start,e.start+e.size)}}self.egfs=new Map,self.loadDIB=function(e){try{let i=egfs.get(e.fileID);if(i){let s=i.getResourceInfo(e.resourceID);if(s){let r=i.readResource(s),a=new f(r).read();postMessage({loadType:t,fileID:e.fileID,resourceID:e.resourceID,pixels:a.buffer},[a.buffer])}}}catch(i){postMessage({loadType:t,fileID:e.fileID,resourceID:e.resourceID,error:i})}},self.loadEGF=function(t){try{if(egfs.has(t.fileID))throw new Error("EGF ".concat(t.fileID," was already loaded."));let i=new B(t.buffer);egfs.set(t.fileID,i),postMessage({loadType:e,fileID:t.fileID,resourceInfo:i.resourceInfo})}catch(i){postMessage({loadType:e,fileID:t.fileID,error:i})}},onmessage=function(i){let s=i.data;switch(s.loadType){case t:loadDIB(s);break;case e:loadEGF(s);break;default:throw new Error("Unhandled LoadType: ".concat(s.loadType))}}})();
//# sourceMappingURL=bundle.min.worker.js.map